
AVRASM ver. 2.1.30  C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm Wed Oct 26 13:07:55 2022

C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test8.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32L
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32L
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00b3 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 00e0 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 016a 	JMP  _usart_tx_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000      	.DB  0x0,0x0
                 
                 _0x0:
000037 4e4f
000038 4420
000039 4e49
00003a 2048      	.DB  0x4F,0x4E,0x20,0x44,0x49,0x4E,0x48,0x20
00003b 203a
00003c 3031
00003d 2530
00003e 4f00      	.DB  0x3A,0x20,0x31,0x30,0x30,0x25,0x0,0x4F
00003f 204e
000040 4944
000041 484e
000042 3a20      	.DB  0x4E,0x20,0x44,0x49,0x4E,0x48,0x20,0x3A
000043 3920
000044 2530
000045 4f00
000046 204e      	.DB  0x20,0x39,0x30,0x25,0x0,0x4F,0x4E,0x20
000047 4944
000048 484e
000049 3a20
00004a 3820      	.DB  0x44,0x49,0x4E,0x48,0x20,0x3A,0x20,0x38
00004b 2530
00004c 4f00
00004d 204e
00004e 4944      	.DB  0x30,0x25,0x0,0x4F,0x4E,0x20,0x44,0x49
00004f 484e
000050 3a20
000051 3720
000052 2530      	.DB  0x4E,0x48,0x20,0x3A,0x20,0x37,0x30,0x25
000053 4f00
000054 204e
000055 4944
000056 484e      	.DB  0x0,0x4F,0x4E,0x20,0x44,0x49,0x4E,0x48
000057 3a20
000058 3620
000059 2530
00005a 4f00      	.DB  0x20,0x3A,0x20,0x36,0x30,0x25,0x0,0x4F
00005b 204e
00005c 4944
00005d 484e
00005e 3a20      	.DB  0x4E,0x20,0x44,0x49,0x4E,0x48,0x20,0x3A
00005f 3520
000060 2530
000061 4f00
000062 204e      	.DB  0x20,0x35,0x30,0x25,0x0,0x4F,0x4E,0x20
000063 4944
000064 484e
000065 3a20
000066 3420      	.DB  0x44,0x49,0x4E,0x48,0x20,0x3A,0x20,0x34
000067 2530
000068 4300
000069 4e41
00006a 2048      	.DB  0x30,0x25,0x0,0x43,0x41,0x4E,0x48,0x20
00006b 4142
00006c 204f
00006d 203a
00006e 3033      	.DB  0x42,0x41,0x4F,0x20,0x3A,0x20,0x33,0x30
00006f 0025
000070 4143
000071 484e
000072 4220      	.DB  0x25,0x0,0x43,0x41,0x4E,0x48,0x20,0x42
000073 4f41
000074 3a20
000075 3220
000076 2530      	.DB  0x41,0x4F,0x20,0x3A,0x20,0x32,0x30,0x25
000077 4e00
000078 5547
000079 2059
00007a 4948      	.DB  0x0,0x4E,0x47,0x55,0x59,0x20,0x48,0x49
00007b 4d45
00007c 3a20
00007d 3120
00007e 2530      	.DB  0x45,0x4D,0x20,0x3A,0x20,0x31,0x30,0x25
00007f 4e00
000080 5547
000081 2059
000082 4948      	.DB  0x0,0x4E,0x47,0x55,0x59,0x20,0x48,0x49
000083 4d45
000084 3a20
000085 3020
000086 0025      	.DB  0x45,0x4D,0x20,0x3A,0x20,0x30,0x25,0x0
                 _0x2000003:
000087 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000088 0001      	.DW  0x01
000089 0002      	.DW  0x02
00008a 0066      	.DW  __REG_BIT_VARS*2
                 
00008b 0006      	.DW  0x06
00008c 0004      	.DW  0x04
00008d 0068      	.DW  __REG_VARS*2
                 
00008e 000f      	.DW  0x0F
00008f 0260      	.DW  _0x7
000090 006e      	.DW  _0x0*2
                 
000091 000e      	.DW  0x0E
000092 026f      	.DW  _0x7+15
000093 007d      	.DW  _0x0*2+15
                 
000094 000e      	.DW  0x0E
000095 027d      	.DW  _0x7+29
000096 008b      	.DW  _0x0*2+29
                 
000097 000e      	.DW  0x0E
000098 028b      	.DW  _0x7+43
000099 0099      	.DW  _0x0*2+43
                 
00009a 000e      	.DW  0x0E
00009b 0299      	.DW  _0x7+57
00009c 00a7      	.DW  _0x0*2+57
                 
00009d 000e      	.DW  0x0E
00009e 02a7      	.DW  _0x7+71
00009f 00b5      	.DW  _0x0*2+71
                 
0000a0 000e      	.DW  0x0E
0000a1 02b5      	.DW  _0x7+85
0000a2 00c3      	.DW  _0x0*2+85
                 
0000a3 000f      	.DW  0x0F
0000a4 02c3      	.DW  _0x7+99
0000a5 00d1      	.DW  _0x0*2+99
                 
0000a6 000f      	.DW  0x0F
0000a7 02d2      	.DW  _0x7+114
0000a8 00e0      	.DW  _0x0*2+114
                 
0000a9 0010      	.DW  0x10
0000aa 02e1      	.DW  _0x7+129
0000ab 00ef      	.DW  _0x0*2+129
                 
0000ac 000f      	.DW  0x0F
0000ad 02f1      	.DW  _0x7+145
0000ae 00ff      	.DW  _0x0*2+145
                 
0000af 0002      	.DW  0x02
0000b0 0310      	.DW  __base_y_G100
0000b1 010e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000b2 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000b3 94f8      	CLI
0000b4 27ee      	CLR  R30
0000b5 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000b6 e0f1      	LDI  R31,1
0000b7 bffb      	OUT  GICR,R31
0000b8 bfeb      	OUT  GICR,R30
0000b9 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000ba e08d      	LDI  R24,(14-2)+1
0000bb e0a2      	LDI  R26,2
0000bc 27bb      	CLR  R27
                 __CLEAR_REG:
0000bd 93ed      	ST   X+,R30
0000be 958a      	DEC  R24
0000bf f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000c0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000c1 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000c2 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000c3 93ed      	ST   X+,R30
0000c4 9701      	SBIW R24,1
0000c5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000c6 e1e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000c7 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000c8 9185      	LPM  R24,Z+
0000c9 9195      	LPM  R25,Z+
0000ca 9700      	SBIW R24,0
0000cb f061      	BREQ __GLOBAL_INI_END
0000cc 91a5      	LPM  R26,Z+
0000cd 91b5      	LPM  R27,Z+
0000ce 9005      	LPM  R0,Z+
0000cf 9015      	LPM  R1,Z+
0000d0 01bf      	MOVW R22,R30
0000d1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000d2 9005      	LPM  R0,Z+
0000d3 920d      	ST   X+,R0
0000d4 9701      	SBIW R24,1
0000d5 f7e1      	BRNE __GLOBAL_INI_LOOP
0000d6 01fb      	MOVW R30,R22
0000d7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000d8 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000d9 bfed      	OUT  SPL,R30
0000da e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000db bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000dc e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000dd e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000de 940c 019b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0000e0 920a      	ST   -Y,R0
0000e1 921a      	ST   -Y,R1
0000e2 92fa      	ST   -Y,R15
0000e3 936a      	ST   -Y,R22
0000e4 937a      	ST   -Y,R23
0000e5 938a      	ST   -Y,R24
0000e6 939a      	ST   -Y,R25
0000e7 93aa      	ST   -Y,R26
0000e8 93ba      	ST   -Y,R27
0000e9 93ea      	ST   -Y,R30
0000ea 93fa      	ST   -Y,R31
0000eb b7ef      	IN   R30,SREG
0000ec 93ea      	ST   -Y,R30
                 ; 0000 0025 char status,data;
                 ; 0000 0026 status=UCSRA;
0000ed 931a      	ST   -Y,R17
0000ee 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000ef b11b      	IN   R17,11
                 ; 0000 0027 data=UDR;
0000f0 b10c      	IN   R16,12
                 ; 0000 0028 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000f1 2fe1      	MOV  R30,R17
0000f2 71ec      	ANDI R30,LOW(0x1C)
0000f3 f009      	BREQ PC+2
0000f4 c065      	RJMP _0x3
                 ; 0000 0029    {
                 ; 0000 002A 
                 ; 0000 002B    if(data=='A')
0000f5 3401      	CPI  R16,65
0000f6 f439      	BRNE _0x4
                 ; 0000 002C       {
                 ; 0000 002D         PORTD.7=0;
0000f7 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 002E         lcd_clear();
                 ; 0000 002F         lcd_gotoxy(0,0);
                 ; 0000 0030         lcd_puts("ON DINH : 100%");
                +
0000f9 e6a0     +LDI R26 , LOW ( _0x7 + ( 0 ) )
0000fa e0b2     +LDI R27 , HIGH ( _0x7 + ( 0 ) )
                 	__POINTW2MN _0x7,0
0000fb 940e 027c 	CALL SUBOPT_0x1
                 ; 0000 0031         delay_ms(1000);
0000fd c05a      	RJMP _0x46
                 ; 0000 0032       }
                 ; 0000 0033       else if(data=='B')
                 _0x4:
0000fe 3402      	CPI  R16,66
0000ff f439      	BRNE _0x9
                 ; 0000 0034       {
                 ; 0000 0035         PORTD.7=0;
000100 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 0036         lcd_clear();
                 ; 0000 0037         lcd_gotoxy(0,0);
                 ; 0000 0038         lcd_puts("ON DINH : 90%");
                +
000102 e6af     +LDI R26 , LOW ( _0x7 + ( 15 ) )
000103 e0b2     +LDI R27 , HIGH ( _0x7 + ( 15 ) )
                 	__POINTW2MN _0x7,15
000104 940e 027c 	CALL SUBOPT_0x1
                 ; 0000 0039         delay_ms(1000);
000106 c051      	RJMP _0x46
                 ; 0000 003A       }
                 ; 0000 003B       else if(data=='C')
                 _0x9:
000107 3403      	CPI  R16,67
000108 f439      	BRNE _0xD
                 ; 0000 003C       {
                 ; 0000 003D         PORTD.7=0;
000109 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 003E         lcd_clear();
                 ; 0000 003F         lcd_gotoxy(0,0);
                 ; 0000 0040         lcd_puts("ON DINH : 80%");
                +
00010b e7ad     +LDI R26 , LOW ( _0x7 + ( 29 ) )
00010c e0b2     +LDI R27 , HIGH ( _0x7 + ( 29 ) )
                 	__POINTW2MN _0x7,29
00010d 940e 0234 	CALL _lcd_puts
                 ; 0000 0041         delay_ms(500);
00010f c046      	RJMP _0x47
                 ; 0000 0042       }
                 ; 0000 0043          else if(data=='D')
                 _0xD:
000110 3404      	CPI  R16,68
000111 f439      	BRNE _0x11
                 ; 0000 0044       {
                 ; 0000 0045         PORTD.7=0;
000112 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 0046         lcd_clear();
                 ; 0000 0047         lcd_gotoxy(0,0);
                 ; 0000 0048         lcd_puts("ON DINH : 70%");
                +
000114 e8ab     +LDI R26 , LOW ( _0x7 + ( 43 ) )
000115 e0b2     +LDI R27 , HIGH ( _0x7 + ( 43 ) )
                 	__POINTW2MN _0x7,43
000116 940e 027c 	CALL SUBOPT_0x1
                 ; 0000 0049         delay_ms(1000);
000118 c03f      	RJMP _0x46
                 ; 0000 004A       }
                 ; 0000 004B        else if(data=='E')
                 _0x11:
000119 3405      	CPI  R16,69
00011a f439      	BRNE _0x15
                 ; 0000 004C       {
                 ; 0000 004D         PORTD.7=0;
00011b 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 004E         lcd_clear();
                 ; 0000 004F         lcd_gotoxy(0,0);
                 ; 0000 0050         lcd_puts("ON DINH : 60%");
                +
00011d e9a9     +LDI R26 , LOW ( _0x7 + ( 57 ) )
00011e e0b2     +LDI R27 , HIGH ( _0x7 + ( 57 ) )
                 	__POINTW2MN _0x7,57
00011f 940e 0234 	CALL _lcd_puts
                 ; 0000 0051         delay_ms(500);
000121 c034      	RJMP _0x47
                 ; 0000 0052       }
                 ; 0000 0053 
                 ; 0000 0054         else if(data=='F')
                 _0x15:
000122 3406      	CPI  R16,70
000123 f439      	BRNE _0x19
                 ; 0000 0055       {
                 ; 0000 0056         PORTD.7=0;
000124 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 0057         lcd_clear();
                 ; 0000 0058         lcd_gotoxy(0,0);
                 ; 0000 0059         lcd_puts("ON DINH : 50%");
                +
000126 eaa7     +LDI R26 , LOW ( _0x7 + ( 71 ) )
000127 e0b2     +LDI R27 , HIGH ( _0x7 + ( 71 ) )
                 	__POINTW2MN _0x7,71
000128 940e 0234 	CALL _lcd_puts
                 ; 0000 005A         delay_ms(500);
00012a c02b      	RJMP _0x47
                 ; 0000 005B       }
                 ; 0000 005C         else if(data=='G')
                 _0x19:
00012b 3407      	CPI  R16,71
00012c f439      	BRNE _0x1D
                 ; 0000 005D       {
                 ; 0000 005E         PORTD.7=0;
00012d 940e 0274 	CALL SUBOPT_0x0
                 ; 0000 005F         lcd_clear();
                 ; 0000 0060         lcd_gotoxy(0,0);
                 ; 0000 0061         lcd_puts("ON DINH : 40%");
                +
00012f eba5     +LDI R26 , LOW ( _0x7 + ( 85 ) )
000130 e0b2     +LDI R27 , HIGH ( _0x7 + ( 85 ) )
                 	__POINTW2MN _0x7,85
000131 940e 027c 	CALL SUBOPT_0x1
                 ; 0000 0062         delay_ms(1000);
000133 c024      	RJMP _0x46
                 ; 0000 0063       }
                 ; 0000 0064         else if(data=='H')
                 _0x1D:
000134 3408      	CPI  R16,72
000135 f439      	BRNE _0x21
                 ; 0000 0065       {
                 ; 0000 0066         lcd_clear();
000136 940e 0281 	CALL SUBOPT_0x2
                 ; 0000 0067         lcd_gotoxy(0,0);
                 ; 0000 0068         lcd_puts("CANH BAO : 30%");
                +
000138 eca3     +LDI R26 , LOW ( _0x7 + ( 99 ) )
000139 e0b2     +LDI R27 , HIGH ( _0x7 + ( 99 ) )
                 	__POINTW2MN _0x7,99
00013a 940e 0288 	CALL SUBOPT_0x3
                 ; 0000 0069         PORTD.7 = 1;
                 ; 0000 006A         delay_ms(1000);
                 ; 0000 006B         PORTD.7 = 0;
                 ; 0000 006C       }
                 ; 0000 006D         else if(data=='I')
00013c c01d      	RJMP _0x26
                 _0x21:
00013d 3409      	CPI  R16,73
00013e f439      	BRNE _0x27
                 ; 0000 006E       {
                 ; 0000 006F         lcd_clear();
00013f 940e 0281 	CALL SUBOPT_0x2
                 ; 0000 0070         lcd_gotoxy(0,0);
                 ; 0000 0071         lcd_puts("CANH BAO : 20%");
                +
000141 eda2     +LDI R26 , LOW ( _0x7 + ( 114 ) )
000142 e0b2     +LDI R27 , HIGH ( _0x7 + ( 114 ) )
                 	__POINTW2MN _0x7,114
000143 940e 0288 	CALL SUBOPT_0x3
                 ; 0000 0072         PORTD.7 = 1;
                 ; 0000 0073         delay_ms(1000);
                 ; 0000 0074         PORTD.7 = 0;
                 ; 0000 0075       }
                 ; 0000 0076         else if(data=='K')
000145 c014      	RJMP _0x2C
                 _0x27:
000146 340b      	CPI  R16,75
000147 f429      	BRNE _0x2D
                 ; 0000 0077       {
                 ; 0000 0078         lcd_clear();
000148 940e 0281 	CALL SUBOPT_0x2
                 ; 0000 0079         lcd_gotoxy(0,0);
                 ; 0000 007A         lcd_puts("NGUY HIEM : 10%");
                +
00014a eea1     +LDI R26 , LOW ( _0x7 + ( 129 ) )
00014b e0b2     +LDI R27 , HIGH ( _0x7 + ( 129 ) )
                 	__POINTW2MN _0x7,129
00014c c006      	RJMP _0x48
                 ; 0000 007B         PORTD.7 = 1;
                 ; 0000 007C         delay_ms(500);
                 ; 0000 007D 
                 ; 0000 007E       }
                 ; 0000 007F         else if(data=='L')
                 _0x2D:
00014d 340c      	CPI  R16,76
00014e f459      	BRNE _0x31
                 ; 0000 0080       {
                 ; 0000 0081         lcd_clear();
00014f 940e 0281 	CALL SUBOPT_0x2
                 ; 0000 0082         lcd_gotoxy(0,0);
                 ; 0000 0083         lcd_puts("NGUY HIEM : 0%");
                +
000151 efa1     +LDI R26 , LOW ( _0x7 + ( 145 ) )
000152 e0b2     +LDI R27 , HIGH ( _0x7 + ( 145 ) )
                 	__POINTW2MN _0x7,145
                 _0x48:
000153 940e 0234 	CALL _lcd_puts
                 ; 0000 0084         PORTD.7 = 1;
000155 9a97      	SBI  0x12,7
                 ; 0000 0085         delay_ms(500);
                 _0x47:
000156 efa4      	LDI  R26,LOW(500)
000157 e0b1      	LDI  R27,HIGH(500)
                 _0x46:
000158 940e 029f 	CALL _delay_ms
                 ; 0000 0086       }
                 ; 0000 0087       }
                 _0x31:
                 _0x2C:
                 _0x26:
                 ; 0000 0088 }
                 _0x3:
00015a 9109      	LD   R16,Y+
00015b 9119      	LD   R17,Y+
00015c 91e9      	LD   R30,Y+
00015d bfef      	OUT  SREG,R30
00015e 91f9      	LD   R31,Y+
00015f 91e9      	LD   R30,Y+
000160 91b9      	LD   R27,Y+
000161 91a9      	LD   R26,Y+
000162 9199      	LD   R25,Y+
000163 9189      	LD   R24,Y+
000164 9179      	LD   R23,Y+
000165 9169      	LD   R22,Y+
000166 90f9      	LD   R15,Y+
000167 9019      	LD   R1,Y+
000168 9009      	LD   R0,Y+
000169 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x7:
000260           	.BYTE 0xA0
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 008F {
                 
                 	.CSEG
                 ; 0000 0090 char data;
                 ; 0000 0091 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0092 data=rx_buffer[rx_rd_index++];
                 ; 0000 0093 #if RX_BUFFER_SIZE != 256
                 ; 0000 0094 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0095 #endif
                 ; 0000 0096 #asm("cli")
                 ; 0000 0097 --rx_counter;
                 ; 0000 0098 #asm("sei")
                 ; 0000 0099 return data;
                 ; 0000 009A }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 00B0 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
00016a 93ea      	ST   -Y,R30
00016b 93fa      	ST   -Y,R31
00016c b7ef      	IN   R30,SREG
00016d 93ea      	ST   -Y,R30
                 ; 0000 00B1 if (tx_counter)
00016e 2088      	TST  R8
00016f f061      	BREQ _0x38
                 ; 0000 00B2    {
                 ; 0000 00B3    --tx_counter;
000170 948a      	DEC  R8
                 ; 0000 00B4    UDR=tx_buffer[tx_rd_index++];
000171 2de9      	MOV  R30,R9
000172 9493      	INC  R9
000173 e0f0      	LDI  R31,0
000174 5fe8      	SUBI R30,LOW(-_tx_buffer)
000175 4ffc      	SBCI R31,HIGH(-_tx_buffer)
000176 81e0      	LD   R30,Z
000177 b9ec      	OUT  0xC,R30
                 ; 0000 00B5 #if TX_BUFFER_SIZE != 256
                 ; 0000 00B6    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
000178 e0e8      	LDI  R30,LOW(8)
000179 15e9      	CP   R30,R9
00017a f409      	BRNE _0x39
00017b 2499      	CLR  R9
                 ; 0000 00B7 #endif
                 ; 0000 00B8    }
                 _0x39:
                 ; 0000 00B9 }
                 _0x38:
00017c 91e9      	LD   R30,Y+
00017d bfef      	OUT  SREG,R30
00017e 91f9      	LD   R31,Y+
00017f 91e9      	LD   R30,Y+
000180 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00C0 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 00C1 while (tx_counter == TX_BUFFER_SIZE);
000181 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x3A:
000182 e0e8      	LDI  R30,LOW(8)
000183 15e8      	CP   R30,R8
000184 f3e9      	BREQ _0x3A
                 ; 0000 00C2 #asm("cli")
000185 94f8      	cli
                 ; 0000 00C3 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000186 2088      	TST  R8
000187 f411      	BRNE _0x3E
000188 995d      	SBIC 0xB,5
000189 c00d      	RJMP _0x3D
                 _0x3E:
                 ; 0000 00C4    {
                 ; 0000 00C5    tx_buffer[tx_wr_index++]=c;
00018a 2de6      	MOV  R30,R6
00018b 9463      	INC  R6
00018c e0f0      	LDI  R31,0
00018d 5fe8      	SUBI R30,LOW(-_tx_buffer)
00018e 4ffc      	SBCI R31,HIGH(-_tx_buffer)
00018f 81a8      	LD   R26,Y
000190 83a0      	STD  Z+0,R26
                 ; 0000 00C6 #if TX_BUFFER_SIZE != 256
                 ; 0000 00C7    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000191 e0e8      	LDI  R30,LOW(8)
000192 15e6      	CP   R30,R6
000193 f409      	BRNE _0x40
000194 2466      	CLR  R6
                 ; 0000 00C8 #endif
                 ; 0000 00C9    ++tx_counter;
                 _0x40:
000195 9483      	INC  R8
                 ; 0000 00CA    }
                 ; 0000 00CB else
000196 c002      	RJMP _0x41
                 _0x3D:
                 ; 0000 00CC    UDR=c;
000197 81e8      	LD   R30,Y
000198 b9ec      	OUT  0xC,R30
                 ; 0000 00CD #asm("sei")
                 _0x41:
000199 9478      	sei
                 ; 0000 00CE }
00019a c0d7      	RJMP _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 00D6 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00D7 // Declare your local variables here
                 ; 0000 00D8 
                 ; 0000 00D9 // Input/Output Ports initialization
                 ; 0000 00DA // Port A initialization
                 ; 0000 00DB // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00DC DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00019b e0e0      	LDI  R30,LOW(0)
00019c bbea      	OUT  0x1A,R30
                 ; 0000 00DD // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00DE PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00019d bbeb      	OUT  0x1B,R30
                 ; 0000 00DF 
                 ; 0000 00E0 // Port B initialization
                 ; 0000 00E1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E2 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00019e bbe7      	OUT  0x17,R30
                 ; 0000 00E3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E4 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00019f bbe8      	OUT  0x18,R30
                 ; 0000 00E5 
                 ; 0000 00E6 // Port C initialization
                 ; 0000 00E7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E8 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0001a0 bbe4      	OUT  0x14,R30
                 ; 0000 00E9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EA PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001a1 bbe5      	OUT  0x15,R30
                 ; 0000 00EB 
                 ; 0000 00EC // Port D initialization
                 ; 0000 00ED // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00EE DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001a2 e8e0      	LDI  R30,LOW(128)
0001a3 bbe1      	OUT  0x11,R30
                 ; 0000 00EF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F0 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001a4 e0e0      	LDI  R30,LOW(0)
0001a5 bbe2      	OUT  0x12,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // Timer/Counter 0 initialization
                 ; 0000 00F3 // Clock source: System Clock
                 ; 0000 00F4 // Clock value: Timer 0 Stopped
                 ; 0000 00F5 // Mode: Normal top=0xFF
                 ; 0000 00F6 // OC0 output: Disconnected
                 ; 0000 00F7 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0001a6 bfe3      	OUT  0x33,R30
                 ; 0000 00F8 TCNT0=0x00;
0001a7 bfe2      	OUT  0x32,R30
                 ; 0000 00F9 OCR0=0x00;
0001a8 bfec      	OUT  0x3C,R30
                 ; 0000 00FA 
                 ; 0000 00FB // Timer/Counter 1 initialization
                 ; 0000 00FC // Clock source: System Clock
                 ; 0000 00FD // Clock value: Timer1 Stopped
                 ; 0000 00FE // Mode: Normal top=0xFFFF
                 ; 0000 00FF // OC1A output: Disconnected
                 ; 0000 0100 // OC1B output: Disconnected
                 ; 0000 0101 // Noise Canceler: Off
                 ; 0000 0102 // Input Capture on Falling Edge
                 ; 0000 0103 // Timer1 Overflow Interrupt: Off
                 ; 0000 0104 // Input Capture Interrupt: Off
                 ; 0000 0105 // Compare A Match Interrupt: Off
                 ; 0000 0106 // Compare B Match Interrupt: Off
                 ; 0000 0107 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001a9 bdef      	OUT  0x2F,R30
                 ; 0000 0108 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001aa bdee      	OUT  0x2E,R30
                 ; 0000 0109 TCNT1H=0x00;
0001ab bded      	OUT  0x2D,R30
                 ; 0000 010A TCNT1L=0x00;
0001ac bdec      	OUT  0x2C,R30
                 ; 0000 010B ICR1H=0x00;
0001ad bde7      	OUT  0x27,R30
                 ; 0000 010C ICR1L=0x00;
0001ae bde6      	OUT  0x26,R30
                 ; 0000 010D OCR1AH=0x00;
0001af bdeb      	OUT  0x2B,R30
                 ; 0000 010E OCR1AL=0x00;
0001b0 bdea      	OUT  0x2A,R30
                 ; 0000 010F OCR1BH=0x00;
0001b1 bde9      	OUT  0x29,R30
                 ; 0000 0110 OCR1BL=0x00;
0001b2 bde8      	OUT  0x28,R30
                 ; 0000 0111 
                 ; 0000 0112 // Timer/Counter 2 initialization
                 ; 0000 0113 // Clock source: System Clock
                 ; 0000 0114 // Clock value: Timer2 Stopped
                 ; 0000 0115 // Mode: Normal top=0xFF
                 ; 0000 0116 // OC2 output: Disconnected
                 ; 0000 0117 ASSR=0<<AS2;
0001b3 bde2      	OUT  0x22,R30
                 ; 0000 0118 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001b4 bde5      	OUT  0x25,R30
                 ; 0000 0119 TCNT2=0x00;
0001b5 bde4      	OUT  0x24,R30
                 ; 0000 011A OCR2=0x00;
0001b6 bde3      	OUT  0x23,R30
                 ; 0000 011B 
                 ; 0000 011C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 011D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0001b7 bfe9      	OUT  0x39,R30
                 ; 0000 011E 
                 ; 0000 011F // External Interrupt(s) initialization
                 ; 0000 0120 // INT0: Off
                 ; 0000 0121 // INT1: Off
                 ; 0000 0122 // INT2: Off
                 ; 0000 0123 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001b8 bfe5      	OUT  0x35,R30
                 ; 0000 0124 MCUCSR=(0<<ISC2);
0001b9 bfe4      	OUT  0x34,R30
                 ; 0000 0125 
                 ; 0000 0126 // USART initialization
                 ; 0000 0127 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0128 // USART Receiver: On
                 ; 0000 0129 // USART Transmitter: On
                 ; 0000 012A // USART Mode: Asynchronous
                 ; 0000 012B // USART Baud Rate: 9600
                 ; 0000 012C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0001ba b9eb      	OUT  0xB,R30
                 ; 0000 012D UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001bb ede8      	LDI  R30,LOW(216)
0001bc b9ea      	OUT  0xA,R30
                 ; 0000 012E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0001bd e8e6      	LDI  R30,LOW(134)
0001be bde0      	OUT  0x20,R30
                 ; 0000 012F UBRRH=0x00;
0001bf e0e0      	LDI  R30,LOW(0)
0001c0 bde0      	OUT  0x20,R30
                 ; 0000 0130 UBRRL=0x33;
0001c1 e3e3      	LDI  R30,LOW(51)
0001c2 b9e9      	OUT  0x9,R30
                 ; 0000 0131 
                 ; 0000 0132 // Analog Comparator initialization
                 ; 0000 0133 // Analog Comparator: Off
                 ; 0000 0134 // The Analog Comparator's positive input is
                 ; 0000 0135 // connected to the AIN0 pin
                 ; 0000 0136 // The Analog Comparator's negative input is
                 ; 0000 0137 // connected to the AIN1 pin
                 ; 0000 0138 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001c3 e8e0      	LDI  R30,LOW(128)
0001c4 b9e8      	OUT  0x8,R30
                 ; 0000 0139 SFIOR=(0<<ACME);
0001c5 e0e0      	LDI  R30,LOW(0)
0001c6 bfe0      	OUT  0x30,R30
                 ; 0000 013A 
                 ; 0000 013B // ADC initialization
                 ; 0000 013C // ADC disabled
                 ; 0000 013D ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0001c7 b9e6      	OUT  0x6,R30
                 ; 0000 013E 
                 ; 0000 013F // SPI initialization
                 ; 0000 0140 // SPI disabled
                 ; 0000 0141 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001c8 b9ed      	OUT  0xD,R30
                 ; 0000 0142 
                 ; 0000 0143 // TWI initialization
                 ; 0000 0144 // TWI disabled
                 ; 0000 0145 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001c9 bfe6      	OUT  0x36,R30
                 ; 0000 0146 
                 ; 0000 0147 // Alphanumeric LCD initialization
                 ; 0000 0148 // Connections are specified in the
                 ; 0000 0149 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 014A // RS - PORTC Bit 4
                 ; 0000 014B // RD - PORTC Bit 5
                 ; 0000 014C // EN - PORTC Bit 6
                 ; 0000 014D // D4 - PORTC Bit 3
                 ; 0000 014E // D5 - PORTC Bit 2
                 ; 0000 014F // D6 - PORTC Bit 1
                 ; 0000 0150 // D7 - PORTC Bit 0
                 ; 0000 0151 // Characters/line: 16
                 ; 0000 0152 lcd_init(16);
0001ca e1a0      	LDI  R26,LOW(16)
0001cb d079      	RCALL _lcd_init
                 ; 0000 0153 
                 ; 0000 0154 // Global enable interrupts
                 ; 0000 0155 #asm("sei")
0001cc 9478      	sei
                 ; 0000 0156 
                 ; 0000 0157 while (1)
                 _0x42:
                 ; 0000 0158       {
                 ; 0000 0159       // Place your code here
                 ; 0000 015A         putchar('Y');
0001cd e5a9      	LDI  R26,LOW(89)
0001ce dfb2      	RCALL _putchar
                 ; 0000 015B         delay_ms(2000);
0001cf eda0      	LDI  R26,LOW(2000)
0001d0 e0b7      	LDI  R27,HIGH(2000)
0001d1 940e 029f 	CALL _delay_ms
                 ; 0000 015C 
                 ; 0000 015D       }
0001d3 cff9      	RJMP _0x42
                 ; 0000 015E }
                 _0x45:
0001d4 cfff      	RJMP _0x45
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001d5 93aa      	ST   -Y,R26
0001d6 81e8      	LD   R30,Y
0001d7 71e0      	ANDI R30,LOW(0x10)
0001d8 f011      	BREQ _0x2000004
0001d9 9aab      	SBI  0x15,3
0001da c001      	RJMP _0x2000005
                 _0x2000004:
0001db 98ab      	CBI  0x15,3
                 _0x2000005:
0001dc 81e8      	LD   R30,Y
0001dd 72e0      	ANDI R30,LOW(0x20)
0001de f011      	BREQ _0x2000006
0001df 9aaa      	SBI  0x15,2
0001e0 c001      	RJMP _0x2000007
                 _0x2000006:
0001e1 98aa      	CBI  0x15,2
                 _0x2000007:
0001e2 81e8      	LD   R30,Y
0001e3 74e0      	ANDI R30,LOW(0x40)
0001e4 f011      	BREQ _0x2000008
0001e5 9aa9      	SBI  0x15,1
0001e6 c001      	RJMP _0x2000009
                 _0x2000008:
0001e7 98a9      	CBI  0x15,1
                 _0x2000009:
0001e8 81e8      	LD   R30,Y
0001e9 78e0      	ANDI R30,LOW(0x80)
0001ea f011      	BREQ _0x200000A
0001eb 9aa8      	SBI  0x15,0
0001ec c001      	RJMP _0x200000B
                 _0x200000A:
0001ed 98a8      	CBI  0x15,0
                 _0x200000B:
                +
0001ee e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001ef 958a     +DEC R24
0001f0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001f1 9aae      	SBI  0x15,6
                +
0001f2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001f3 958a     +DEC R24
0001f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001f5 98ae      	CBI  0x15,6
                +
0001f6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001f7 958a     +DEC R24
0001f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001f9 c078      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001fa 93aa      	ST   -Y,R26
0001fb 81a8      	LD   R26,Y
0001fc dfd8      	RCALL __lcd_write_nibble_G100
0001fd 81e8          ld    r30,y
0001fe 95e2          swap  r30
0001ff 83e8          st    y,r30
000200 81a8      	LD   R26,Y
000201 dfd3      	RCALL __lcd_write_nibble_G100
                +
000202 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000203 958a     +DEC R24
000204 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000205 c06c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000206 93aa      	ST   -Y,R26
000207 81e8      	LD   R30,Y
000208 e0f0      	LDI  R31,0
000209 5fe0      	SUBI R30,LOW(-__base_y_G100)
00020a 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00020b 81e0      	LD   R30,Z
00020c 81a9      	LDD  R26,Y+1
00020d 0fae      	ADD  R26,R30
00020e dfeb      	RCALL __lcd_write_data
00020f 80b9      	LDD  R11,Y+1
000210 80a8      	LDD  R10,Y+0
000211 9622      	ADIW R28,2
000212 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000213 e0a2      	LDI  R26,LOW(2)
000214 940e 0291 	CALL SUBOPT_0x4
000216 e0ac      	LDI  R26,LOW(12)
000217 dfe2      	RCALL __lcd_write_data
000218 e0a1      	LDI  R26,LOW(1)
000219 940e 0291 	CALL SUBOPT_0x4
00021b e0e0      	LDI  R30,LOW(0)
00021c 2eae      	MOV  R10,R30
00021d 2ebe      	MOV  R11,R30
00021e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00021f 93aa      	ST   -Y,R26
000220 81a8      	LD   R26,Y
000221 30aa      	CPI  R26,LOW(0xA)
000222 f011      	BREQ _0x2000011
000223 14bd      	CP   R11,R13
000224 f048      	BRLO _0x2000010
                 _0x2000011:
000225 e0e0      	LDI  R30,LOW(0)
000226 93ea      	ST   -Y,R30
000227 94a3      	INC  R10
000228 2daa      	MOV  R26,R10
000229 dfdc      	RCALL _lcd_gotoxy
00022a 81a8      	LD   R26,Y
00022b 30aa      	CPI  R26,LOW(0xA)
00022c f409      	BRNE _0x2000013
00022d c044      	RJMP _0x2080001
                 _0x2000013:
                 _0x2000010:
00022e 94b3      	INC  R11
00022f 9aac      	SBI  0x15,4
000230 81a8      	LD   R26,Y
000231 dfc8      	RCALL __lcd_write_data
000232 98ac      	CBI  0x15,4
000233 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000234 93ba      	ST   -Y,R27
000235 93aa      	ST   -Y,R26
000236 931a      	ST   -Y,R17
                 _0x2000014:
000237 81a9      	LDD  R26,Y+1
000238 81ba      	LDD  R27,Y+1+1
000239 91ed      	LD   R30,X+
00023a 83a9      	STD  Y+1,R26
00023b 83ba      	STD  Y+1+1,R27
00023c 2f1e      	MOV  R17,R30
00023d 30e0      	CPI  R30,0
00023e f019      	BREQ _0x2000016
00023f 2fa1      	MOV  R26,R17
000240 dfde      	RCALL _lcd_putchar
000241 cff5      	RJMP _0x2000014
                 _0x2000016:
000242 8118      	LDD  R17,Y+0
000243 9623      	ADIW R28,3
000244 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000245 93aa      	ST   -Y,R26
000246 9aa3      	SBI  0x14,3
000247 9aa2      	SBI  0x14,2
000248 9aa1      	SBI  0x14,1
000249 9aa0      	SBI  0x14,0
00024a 9aa6      	SBI  0x14,6
00024b 9aa4      	SBI  0x14,4
00024c 9aa5      	SBI  0x14,5
00024d 98ae      	CBI  0x15,6
00024e 98ac      	CBI  0x15,4
00024f 98ad      	CBI  0x15,5
000250 80d8      	LDD  R13,Y+0
000251 81e8      	LD   R30,Y
000252 58e0      	SUBI R30,-LOW(128)
                +
000253 93e0 0312+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000255 81e8      	LD   R30,Y
000256 54e0      	SUBI R30,-LOW(192)
                +
000257 93e0 0313+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000259 e1a4      	LDI  R26,LOW(20)
00025a e0b0      	LDI  R27,0
00025b 940e 029f 	CALL _delay_ms
00025d 940e 0297 	CALL SUBOPT_0x5
00025f 940e 0297 	CALL SUBOPT_0x5
000261 940e 0297 	CALL SUBOPT_0x5
000263 e2a0      	LDI  R26,LOW(32)
000264 df70      	RCALL __lcd_write_nibble_G100
                +
000265 ec88     +LDI R24 , LOW ( 200 )
000266 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000267 9701     +SBIW R24 , 1
000268 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000269 e2a8      	LDI  R26,LOW(40)
00026a df8f      	RCALL __lcd_write_data
00026b e0a4      	LDI  R26,LOW(4)
00026c df8d      	RCALL __lcd_write_data
00026d e8a5      	LDI  R26,LOW(133)
00026e df8b      	RCALL __lcd_write_data
00026f e0a6      	LDI  R26,LOW(6)
000270 df89      	RCALL __lcd_write_data
000271 dfa1      	RCALL _lcd_clear
                 _0x2080001:
000272 9621      	ADIW R28,1
000273 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
000300           	.BYTE 0x8
                 _tx_buffer:
000308           	.BYTE 0x8
                 __base_y_G100:
000310           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x0:
000274 9897      	CBI  0x12,7
000275 940e 0213 	CALL _lcd_clear
000277 e0e0      	LDI  R30,LOW(0)
000278 93ea      	ST   -Y,R30
000279 e0a0      	LDI  R26,LOW(0)
00027a 940c 0206 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00027c 940e 0234 	CALL _lcd_puts
00027e eea8      	LDI  R26,LOW(1000)
00027f e0b3      	LDI  R27,HIGH(1000)
000280 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
000281 940e 0213 	CALL _lcd_clear
000283 e0e0      	LDI  R30,LOW(0)
000284 93ea      	ST   -Y,R30
000285 e0a0      	LDI  R26,LOW(0)
000286 940c 0206 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000288 940e 0234 	CALL _lcd_puts
00028a 9a97      	SBI  0x12,7
00028b eea8      	LDI  R26,LOW(1000)
00028c e0b3      	LDI  R27,HIGH(1000)
00028d 940e 029f 	CALL _delay_ms
00028f 9897      	CBI  0x12,7
000290 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000291 940e 01fa 	CALL __lcd_write_data
000293 e0a3      	LDI  R26,LOW(3)
000294 e0b0      	LDI  R27,0
000295 940c 029f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000297 e3a0      	LDI  R26,LOW(48)
000298 940e 01d5 	CALL __lcd_write_nibble_G100
                +
00029a ec88     +LDI R24 , LOW ( 200 )
00029b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00029c 9701     +SBIW R24 , 1
00029d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00029e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00029f 9610      	adiw r26,0
0002a0 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002a1 ed80     +LDI R24 , LOW ( 0x7D0 )
0002a2 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002a3 9701     +SBIW R24 , 1
0002a4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002a5 95a8      	wdr
0002a6 9711      	sbiw r26,1
0002a7 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002a8 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32L register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   4 r7 :   0 
r8 :   5 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   2 
r16:  14 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   7 r26:  59 r27:  24 r28:   4 r29:   1 r30: 122 r31:  13 
x  :   4 y  :  71 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega32L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   5 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  36 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   0 cpi   :  14 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   5 jmp   :  25 ld    :  35 ldd   :   7 ldi   :  88 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   8 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  48 pop   :   0 push  :   0 rcall :  15 ret   :   8 
reti  :   2 rjmp  :  26 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :  15 sbic  :   1 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  33 std   :   3 sts   :   2 sub   :   0 subi  :   5 swap  :   1 
tst   :   2 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega32L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000552   1088    274   1362   32768   4.2%
[.dseg] 0x000060 0x000314      0    180    180    2048   8.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
