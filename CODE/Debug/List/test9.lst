
AVRASM ver. 2.1.30  C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm Thu Nov 03 11:12:42 2022

C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32L
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32L
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc=R4
                 	.DEF _adc_msb=R5
                 	.DEF _N=R6
                 	.DEF _N_msb=R7
                 	.DEF _rx_wr_index=R9
                 	.DEF _rx_rd_index=R8
                 	.DEF _rx_counter=R11
                 	.DEF _tx_wr_index=R10
                 	.DEF _tx_rd_index=R13
                 	.DEF _tx_counter=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00a3 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 01de 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 01ed 	JMP  _usart_tx_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000      	.DB  0x0,0x0
                 
                 _0x0:
000037 4e4f
000038 4420
000039 4e49
00003a 0048      	.DB  0x4F,0x4E,0x20,0x44,0x49,0x4E,0x48,0x0
00003b 203a
00003c 3031
00003d 2530
00003e 3a00      	.DB  0x3A,0x20,0x31,0x30,0x30,0x25,0x0,0x3A
00003f 3920
000040 2530
000041 3a00
000042 3820      	.DB  0x20,0x39,0x30,0x25,0x0,0x3A,0x20,0x38
000043 2530
000044 3a00
000045 3720
000046 2530      	.DB  0x30,0x25,0x0,0x3A,0x20,0x37,0x30,0x25
000047 3a00
000048 3620
000049 2530
00004a 3a00      	.DB  0x0,0x3A,0x20,0x36,0x30,0x25,0x0,0x3A
00004b 3520
00004c 2530
00004d 3a00
00004e 3420      	.DB  0x20,0x35,0x30,0x25,0x0,0x3A,0x20,0x34
00004f 2530
000050 4300
000051 4e41
000052 2048      	.DB  0x30,0x25,0x0,0x43,0x41,0x4E,0x48,0x20
000053 4142
000054 004f
000055 203a
000056 3033      	.DB  0x42,0x41,0x4F,0x0,0x3A,0x20,0x33,0x30
000057 0025
000058 203a
000059 3032
00005a 0025      	.DB  0x25,0x0,0x3A,0x20,0x32,0x30,0x25,0x0
00005b 474e
00005c 5955
00005d 4820
00005e 4549      	.DB  0x4E,0x47,0x55,0x59,0x20,0x48,0x49,0x45
00005f 004d
000060 203a
000061 3031
000062 0025      	.DB  0x4D,0x0,0x3A,0x20,0x31,0x30,0x25,0x0
000063 203a
000064 2530
000065 4700
000066 6169      	.DB  0x3A,0x20,0x30,0x25,0x0,0x47,0x69,0x61
000067 5420
000068 6972
000069 203a
C:\Users\Admin\Desktop\RETEST\TEST\RECODE\Debug\List\test9.asm(1156): warning: .cseg .db misalignment - padding zero byte
00006a 0000      	.DB  0x20,0x54,0x72,0x69,0x3A,0x20,0x0
                 _0x2020003:
00006b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00006c 0001      	.DW  0x01
00006d 0002      	.DW  0x02
00006e 0066      	.DW  __REG_BIT_VARS*2
                 
00006f 0006      	.DW  0x06
000070 0008      	.DW  0x08
000071 0068      	.DW  __REG_VARS*2
                 
000072 0008      	.DW  0x08
000073 0260      	.DW  _0x9
000074 006e      	.DW  _0x0*2
                 
000075 0007      	.DW  0x07
000076 0268      	.DW  _0x9+8
000077 0076      	.DW  _0x0*2+8
                 
000078 0006      	.DW  0x06
000079 026f      	.DW  _0x9+15
00007a 007d      	.DW  _0x0*2+15
                 
00007b 0006      	.DW  0x06
00007c 0275      	.DW  _0x9+21
00007d 0083      	.DW  _0x0*2+21
                 
00007e 0006      	.DW  0x06
00007f 027b      	.DW  _0x9+27
000080 0089      	.DW  _0x0*2+27
                 
000081 0006      	.DW  0x06
000082 0281      	.DW  _0x9+33
000083 008f      	.DW  _0x0*2+33
                 
000084 0006      	.DW  0x06
000085 0287      	.DW  _0x9+39
000086 0095      	.DW  _0x0*2+39
                 
000087 0006      	.DW  0x06
000088 028d      	.DW  _0x9+45
000089 009b      	.DW  _0x0*2+45
                 
00008a 0009      	.DW  0x09
00008b 0293      	.DW  _0x9+51
00008c 00a1      	.DW  _0x0*2+51
                 
00008d 0006      	.DW  0x06
00008e 029c      	.DW  _0x9+60
00008f 00aa      	.DW  _0x0*2+60
                 
000090 0006      	.DW  0x06
000091 02a2      	.DW  _0x9+66
000092 00b0      	.DW  _0x0*2+66
                 
000093 000a      	.DW  0x0A
000094 02a8      	.DW  _0x9+72
000095 00b6      	.DW  _0x0*2+72
                 
000096 0006      	.DW  0x06
000097 02b2      	.DW  _0x9+82
000098 00c0      	.DW  _0x0*2+82
                 
000099 0005      	.DW  0x05
00009a 02b8      	.DW  _0x9+88
00009b 00c6      	.DW  _0x0*2+88
                 
00009c 000a      	.DW  0x0A
00009d 02bd      	.DW  _0x24
00009e 00cb      	.DW  _0x0*2+93
                 
00009f 0002      	.DW  0x02
0000a0 02d7      	.DW  __base_y_G101
0000a1 00d6      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000a2 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000a3 94f8      	CLI
0000a4 27ee      	CLR  R30
0000a5 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a6 e0f1      	LDI  R31,1
0000a7 bffb      	OUT  GICR,R31
0000a8 bfeb      	OUT  GICR,R30
0000a9 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000aa e08d      	LDI  R24,(14-2)+1
0000ab e0a2      	LDI  R26,2
0000ac 27bb      	CLR  R27
                 __CLEAR_REG:
0000ad 93ed      	ST   X+,R30
0000ae 958a      	DEC  R24
0000af f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000b0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000b1 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000b2 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000b3 93ed      	ST   X+,R30
0000b4 9701      	SBIW R24,1
0000b5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b6 ede8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b7 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b8 9185      	LPM  R24,Z+
0000b9 9195      	LPM  R25,Z+
0000ba 9700      	SBIW R24,0
0000bb f061      	BREQ __GLOBAL_INI_END
0000bc 91a5      	LPM  R26,Z+
0000bd 91b5      	LPM  R27,Z+
0000be 9005      	LPM  R0,Z+
0000bf 9015      	LPM  R1,Z+
0000c0 01bf      	MOVW R22,R30
0000c1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000c2 9005      	LPM  R0,Z+
0000c3 920d      	ST   X+,R0
0000c4 9701      	SBIW R24,1
0000c5 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c6 01fb      	MOVW R30,R22
0000c7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c8 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c9 bfed      	OUT  SPL,R30
0000ca e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000cb bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000cc e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000cd e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ce 940c 021f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <main.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <main.h>
                 ;#include <adc.h>
                 ;
                 ;unsigned int adc;
                 ;// Declare your global variables here
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0001 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ;    ADMUX=adc_input | ADC_VREF_TYPE;
0000d0 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
0000d1 81e8      	LD   R30,Y
0000d2 64e0      	ORI  R30,0x40
0000d3 b9e7      	OUT  0x7,R30
                 ;// Delay needed for the stabilization of the ADC input voltage
                 ;    delay_us(10);
                +
0000d4 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000d5 958a     +DEC R24
0000d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ;// Start the AD conversion
                 ;    ADCSRA|=(1<<ADSC);
0000d7 9a36      	SBI  0x6,6
                 ;// Wait for the AD conversion to complete
                 ;    while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
0000d8 9b34      	SBIS 0x6,4
0000d9 cffe      	RJMP _0x3
                 ;    ADCSRA|=(1<<ADIF);
0000da 9a34      	SBI  0x6,4
                 ;    return ADCW;
0000db b1e4      	IN   R30,0x4
0000dc b1f5      	IN   R31,0x4+1
0000dd 940c 0355 	JMP  _0x2080001
                 ;}
                 ; .FEND
                 ;
                 ;unsigned int N;
                 ;float gtri_bcd()
                 ;{
                 _gtri_bcd:
                 ; .FSTART _gtri_bcd
                 ;    float giatri, temp, temp2;
                 ;    N = read_adc(0);
0000df 972c      	SBIW R28,12
                 ;	giatri -> Y+8
                 ;	temp -> Y+4
                 ;	temp2 -> Y+0
0000e0 e0a0      	LDI  R26,LOW(0)
0000e1 dfee      	RCALL _read_adc
0000e2 013f      	MOVW R6,R30
                 ;    temp = ((float)N * 5) / 1023;
0000e3 940e 0357 	CALL SUBOPT_0x0
                +
0000e5 83ec     +STD Y + 4 , R30
0000e6 83fd     +STD Y + 4 + 1 , R31
0000e7 836e     +STD Y + 4 + 2 , R22
0000e8 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ;    temp2 = temp * 5.7 * 100;
                +
0000e9 81ac     +LDD R26 , Y + 4
0000ea 81bd     +LDD R27 , Y + 4 + 1
0000eb 818e     +LDD R24 , Y + 4 + 2
0000ec 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
0000ed 940e 036a 	CALL SUBOPT_0x1
0000ef 940e 0377 	CALL SUBOPT_0x2
                 ;    //temp2 = temp * 6.602 * 100;
                 ;    giatri = temp2 / 100;
0000f1 940e 037c 	CALL SUBOPT_0x3
                +
0000f3 87e8     +STD Y + 8 , R30
0000f4 87f9     +STD Y + 8 + 1 , R31
0000f5 876a     +STD Y + 8 + 2 , R22
0000f6 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
                 ;    return giatri;
0000f7 962c      	ADIW R28,12
0000f8 9508      	RET
                 ;}
                 ; .FEND
                 ;
                 ;void lcd_putnum(unsigned int N)
                 ;{
                 _lcd_putnum:
                 ; .FSTART _lcd_putnum
                 ;     float temp, temp2, giatri;
                 ;     unsigned int Nghin, Tram, Chuc, Dv, temp3;
                 ;     temp = ((float)N * 5) / 1023;
0000f9 93ba      	ST   -Y,R27
0000fa 93aa      	ST   -Y,R26
0000fb 9760      	SBIW R28,16
0000fc 940e 0566 	CALL __SAVELOCR6
                 ;	N -> Y+22
                 ;	temp -> Y+18
                 ;	temp2 -> Y+14
                 ;	giatri -> Y+10
                 ;	Nghin -> R16,R17
                 ;	Tram -> R18,R19
                 ;	Chuc -> R20,R21
                 ;	Dv -> Y+8
                 ;	temp3 -> Y+6
0000fe 89ee      	LDD  R30,Y+22
0000ff 89ff      	LDD  R31,Y+22+1
000100 940e 0357 	CALL SUBOPT_0x0
                +
000102 8bea     +STD Y + 18 , R30
000103 8bfb     +STD Y + 18 + 1 , R31
000104 8b6c     +STD Y + 18 + 2 , R22
000105 8b7d     +STD Y + 18 + 3 , R23
                 	__PUTD1S 18
                 ;     temp2 = temp * 5.7 * 100;
                +
000106 89aa     +LDD R26 , Y + 18
000107 89bb     +LDD R27 , Y + 18 + 1
000108 898c     +LDD R24 , Y + 18 + 2
000109 899d     +LDD R25 , Y + 18 + 3
                 	__GETD2S 18
00010a 940e 036a 	CALL SUBOPT_0x1
                +
00010c 87ee     +STD Y + 14 , R30
00010d 87ff     +STD Y + 14 + 1 , R31
00010e 8b68     +STD Y + 14 + 2 , R22
00010f 8b79     +STD Y + 14 + 3 , R23
                 	__PUTD1S 14
                 ;     //temp2 = temp * 6.602 * 100;
                 ;     temp3 = (int)temp2;
000110 940e 0421 	CALL __CFD1
000112 83ee      	STD  Y+6,R30
000113 83ff      	STD  Y+6+1,R31
                 ;     Nghin = temp3/1000;
000114 81ae      	LDD  R26,Y+6
000115 81bf      	LDD  R27,Y+6+1
000116 eee8      	LDI  R30,LOW(1000)
000117 e0f3      	LDI  R31,HIGH(1000)
000118 940e 0546 	CALL __DIVW21U
00011a 018f      	MOVW R16,R30
                 ;     Tram = (temp3%1000) /100;
00011b 81ae      	LDD  R26,Y+6
00011c 81bf      	LDD  R27,Y+6+1
00011d eee8      	LDI  R30,LOW(1000)
00011e e0f3      	LDI  R31,HIGH(1000)
00011f 940e 0559 	CALL __MODW21U
000121 01df      	MOVW R26,R30
000122 e6e4      	LDI  R30,LOW(100)
000123 e0f0      	LDI  R31,HIGH(100)
000124 940e 0546 	CALL __DIVW21U
000126 019f      	MOVW R18,R30
                 ;     Chuc = (temp3%100) /10;
000127 81ae      	LDD  R26,Y+6
000128 81bf      	LDD  R27,Y+6+1
000129 e6e4      	LDI  R30,LOW(100)
00012a e0f0      	LDI  R31,HIGH(100)
00012b 940e 0559 	CALL __MODW21U
00012d 01df      	MOVW R26,R30
00012e e0ea      	LDI  R30,LOW(10)
00012f e0f0      	LDI  R31,HIGH(10)
000130 940e 0546 	CALL __DIVW21U
000132 01af      	MOVW R20,R30
                 ;     Dv = temp3 % 10;
000133 81ae      	LDD  R26,Y+6
000134 81bf      	LDD  R27,Y+6+1
000135 e0ea      	LDI  R30,LOW(10)
000136 e0f0      	LDI  R31,HIGH(10)
000137 940e 0559 	CALL __MODW21U
000139 87e8      	STD  Y+8,R30
00013a 87f9      	STD  Y+8+1,R31
                 ;     lcd_putchar(Nghin + 48);
00013b 2fa0      	MOV  R26,R16
00013c 5da0      	SUBI R26,-LOW(48)
00013d 940e 02f6 	CALL _lcd_putchar
                 ;     lcd_putchar(Tram + 48);
00013f 2fa2      	MOV  R26,R18
000140 5da0      	SUBI R26,-LOW(48)
000141 940e 02f6 	CALL _lcd_putchar
                 ;     lcd_putchar(',');
000143 e2ac      	LDI  R26,LOW(44)
000144 940e 02f6 	CALL _lcd_putchar
                 ;     lcd_putchar(Chuc + 48);
000146 2fa4      	MOV  R26,R20
000147 5da0      	SUBI R26,-LOW(48)
000148 940e 02f6 	CALL _lcd_putchar
                 ;     lcd_putchar(Dv + 48);
00014a 85a8      	LDD  R26,Y+8
00014b 5da0      	SUBI R26,-LOW(48)
00014c 940e 02f6 	CALL _lcd_putchar
                 ;     lcd_putchar('V');
00014e e5a6      	LDI  R26,LOW(86)
00014f 940e 02f6 	CALL _lcd_putchar
                 ;     giatri = temp2 / 100;
                +
000151 85ae     +LDD R26 , Y + 14
000152 85bf     +LDD R27 , Y + 14 + 1
000153 8988     +LDD R24 , Y + 14 + 2
000154 8999     +LDD R25 , Y + 14 + 3
                 	__GETD2S 14
000155 940e 037c 	CALL SUBOPT_0x3
                +
000157 87ea     +STD Y + 10 , R30
000158 87fb     +STD Y + 10 + 1 , R31
000159 876c     +STD Y + 10 + 2 , R22
00015a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
                 ;     if (giatri > 11.9)
00015b 940e 0383 	CALL SUBOPT_0x4
00015d 940e 0388 	CALL SUBOPT_0x5
00015f f009      	BREQ PC+2
000160 f408      	BRCC PC+2
000161 c03a      	RJMP _0x6
                 ;     {
                 ;        PORTD.7 = 0;
000162 9897      	CBI  0x12,7
                 ;        lcd_gotoxy(1,1);
000163 940e 038f 	CALL SUBOPT_0x6
                 ;        lcd_puts("ON DINH");
                +
000165 e6a0     +LDI R26 , LOW ( _0x9 + ( 0 ) )
000166 e0b2     +LDI R27 , HIGH ( _0x9 + ( 0 ) )
                 	__POINTW2MN _0x9,0
000167 940e 0394 	CALL SUBOPT_0x7
                 ;
                 ;        if(giatri>=12.7)
000169 940e 0397 	CALL SUBOPT_0x8
00016b f018      	BRLO _0xA
                 ;        {
                 ;            lcd_puts(": 100%");
                +
00016c e6a8     +LDI R26 , LOW ( _0x9 + ( 8 ) )
00016d e0b2     +LDI R27 , HIGH ( _0x9 + ( 8 ) )
                 	__POINTW2MN _0x9,8
00016e c02a      	RJMP _0x4D
                 ;        }
                 ;        else if (giatri >= 12.5)
                 _0xA:
00016f 940e 0383 	CALL SUBOPT_0x4
000171 940e 039e 	CALL SUBOPT_0x9
000173 f018      	BRLO _0xC
                 ;        {
                 ;
                 ;            lcd_puts(": 90%");
                +
000174 e6af     +LDI R26 , LOW ( _0x9 + ( 15 ) )
000175 e0b2     +LDI R27 , HIGH ( _0x9 + ( 15 ) )
                 	__POINTW2MN _0x9,15
000176 c022      	RJMP _0x4D
                 ;        }
                 ;        else if (giatri >= 12.42)
                 _0xC:
000177 940e 0383 	CALL SUBOPT_0x4
000179 940e 03a5 	CALL SUBOPT_0xA
00017b f018      	BRLO _0xE
                 ;        {
                 ;
                 ;            lcd_puts(": 80%");
                +
00017c e7a5     +LDI R26 , LOW ( _0x9 + ( 21 ) )
00017d e0b2     +LDI R27 , HIGH ( _0x9 + ( 21 ) )
                 	__POINTW2MN _0x9,21
00017e c01a      	RJMP _0x4D
                 ;        }
                 ;        else if (giatri >= 12.32)
                 _0xE:
00017f 940e 0383 	CALL SUBOPT_0x4
000181 940e 03ac 	CALL SUBOPT_0xB
000183 f018      	BRLO _0x10
                 ;        {
                 ;
                 ;            lcd_puts(": 70%");
                +
000184 e7ab     +LDI R26 , LOW ( _0x9 + ( 27 ) )
000185 e0b2     +LDI R27 , HIGH ( _0x9 + ( 27 ) )
                 	__POINTW2MN _0x9,27
000186 c012      	RJMP _0x4D
                 ;        }
                 ;        else if (giatri >= 12.20)
                 _0x10:
000187 940e 0383 	CALL SUBOPT_0x4
000189 940e 03b3 	CALL SUBOPT_0xC
00018b f018      	BRLO _0x12
                 ;        {
                 ;
                 ;            lcd_puts(": 60%");
                +
00018c e8a1     +LDI R26 , LOW ( _0x9 + ( 33 ) )
00018d e0b2     +LDI R27 , HIGH ( _0x9 + ( 33 ) )
                 	__POINTW2MN _0x9,33
00018e c00a      	RJMP _0x4D
                 ;        }
                 ;        else if (giatri >= 12.06)
                 _0x12:
00018f 940e 0383 	CALL SUBOPT_0x4
000191 940e 03ba 	CALL SUBOPT_0xD
000193 f018      	BRLO _0x14
                 ;        {
                 ;
                 ;            lcd_puts(": 50%");
                +
000194 e8a7     +LDI R26 , LOW ( _0x9 + ( 39 ) )
000195 e0b2     +LDI R27 , HIGH ( _0x9 + ( 39 ) )
                 	__POINTW2MN _0x9,39
000196 c002      	RJMP _0x4D
                 ;        }
                 ;        else
                 _0x14:
                 ;        {
                 ;            lcd_puts(": 40%");
                +
000197 e8ad     +LDI R26 , LOW ( _0x9 + ( 45 ) )
000198 e0b2     +LDI R27 , HIGH ( _0x9 + ( 45 ) )
                 	__POINTW2MN _0x9,45
                 _0x4D:
000199 940e 0316 	CALL _lcd_puts
                 ;        }
                 ;     }
                 ;     else if (giatri >= 11.58)
00019b c02e      	RJMP _0x16
                 _0x6:
00019c 940e 03c1 	CALL SUBOPT_0xE
00019e f0b8      	BRLO _0x17
                 ;     {
                 ;        PORTD.7 = 1;
00019f 9a97      	SBI  0x12,7
                 ;        lcd_gotoxy(1,1);
0001a0 940e 038f 	CALL SUBOPT_0x6
                 ;        lcd_puts("CANH BAO");
                +
0001a2 e9a3     +LDI R26 , LOW ( _0x9 + ( 51 ) )
0001a3 e0b2     +LDI R27 , HIGH ( _0x9 + ( 51 ) )
                 	__POINTW2MN _0x9,51
0001a4 940e 0394 	CALL SUBOPT_0x7
                 ;         if(giatri >= 11.75)
0001a6 940e 03c9 	CALL SUBOPT_0xF
0001a8 f018      	BRLO _0x1A
                 ;        {
                 ;            lcd_puts(": 30%");
                +
0001a9 e9ac     +LDI R26 , LOW ( _0x9 + ( 60 ) )
0001aa e0b2     +LDI R27 , HIGH ( _0x9 + ( 60 ) )
                 	__POINTW2MN _0x9,60
0001ab c002      	RJMP _0x4E
                 ;        }
                 ;         else
                 _0x1A:
                 ;        {
                 ;            lcd_puts(": 20%");
                +
0001ac eaa2     +LDI R26 , LOW ( _0x9 + ( 66 ) )
0001ad e0b2     +LDI R27 , HIGH ( _0x9 + ( 66 ) )
                 	__POINTW2MN _0x9,66
                 _0x4E:
0001ae 940e 0316 	CALL _lcd_puts
                 ;        }
                 ;        delay_ms(1000);
0001b0 eea8      	LDI  R26,LOW(1000)
0001b1 e0b3      	LDI  R27,HIGH(1000)
0001b2 940e 03e8 	CALL _delay_ms
                 ;        PORTD.7 = 0;
0001b4 9897      	CBI  0x12,7
                 ;     }
                 ;     else if(giatri < 11.58)
0001b5 c014      	RJMP _0x1E
                 _0x17:
0001b6 940e 03c1 	CALL SUBOPT_0xE
0001b8 f488      	BRSH _0x1F
                 ;     {  PORTD.7 = 1;
0001b9 9a97      	SBI  0x12,7
                 ;        lcd_gotoxy(1,1);
0001ba 940e 038f 	CALL SUBOPT_0x6
                 ;        lcd_puts("NGUY HIEM");
                +
0001bc eaa8     +LDI R26 , LOW ( _0x9 + ( 72 ) )
0001bd e0b2     +LDI R27 , HIGH ( _0x9 + ( 72 ) )
                 	__POINTW2MN _0x9,72
0001be 940e 0394 	CALL SUBOPT_0x7
                 ;         if (giatri >= 11.31)
0001c0 940e 03d0 	CALL SUBOPT_0x10
0001c2 f018      	BRLO _0x22
                 ;        {
                 ;            lcd_puts(": 10%");
                +
0001c3 eba2     +LDI R26 , LOW ( _0x9 + ( 82 ) )
0001c4 e0b2     +LDI R27 , HIGH ( _0x9 + ( 82 ) )
                 	__POINTW2MN _0x9,82
0001c5 c002      	RJMP _0x4F
                 ;        }
                 ;        else
                 _0x22:
                 ;        {
                 ;            lcd_puts(": 0%");
                +
0001c6 eba8     +LDI R26 , LOW ( _0x9 + ( 88 ) )
0001c7 e0b2     +LDI R27 , HIGH ( _0x9 + ( 88 ) )
                 	__POINTW2MN _0x9,88
                 _0x4F:
0001c8 940e 0316 	CALL _lcd_puts
                 ;        }
                 ;     }
                 ;}
                 _0x1F:
                 _0x1E:
                 _0x16:
0001ca 940e 056d 	CALL __LOADLOCR6
0001cc 9668      	ADIW R28,24
0001cd 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x9:
000260           	.BYTE 0x5D
                 ;
                 ;void lcd_hienthi()
                 ;{
                 
                 	.CSEG
                 _lcd_hienthi:
                 ; .FSTART _lcd_hienthi
                 ;    adc = read_adc(0);
0001ce e0a0      	LDI  R26,LOW(0)
0001cf df00      	RCALL _read_adc
0001d0 012f      	MOVW R4,R30
                 ;    lcd_puts("Gia Tri: ");
                +
0001d1 ebad     +LDI R26 , LOW ( _0x24 + ( 0 ) )
0001d2 e0b2     +LDI R27 , HIGH ( _0x24 + ( 0 ) )
                 	__POINTW2MN _0x24,0
0001d3 940e 0316 	CALL _lcd_puts
                 ;    lcd_putnum(adc);
0001d5 01d2      	MOVW R26,R4
0001d6 df22      	RCALL _lcd_putnum
                 ;    delay_ms(1000);
0001d7 eea8      	LDI  R26,LOW(1000)
0001d8 e0b3      	LDI  R27,HIGH(1000)
0001d9 940e 03e8 	CALL _delay_ms
                 ;    lcd_clear();
0001db 940e 02e8 	CALL _lcd_clear
                 ;}
0001dd 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x24:
0002bd           	.BYTE 0xA
                 ;
                 ;// Declare your global variables here
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0020 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0001de 93ea      	ST   -Y,R30
0001df b7ef      	IN   R30,SREG
0001e0 93ea      	ST   -Y,R30
                 ; 0000 0021 char status,data;
                 ; 0000 0022 status=UCSRA;
0001e1 931a      	ST   -Y,R17
0001e2 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001e3 b11b      	IN   R17,11
                 ; 0000 0023 data=UDR;
0001e4 b10c      	IN   R16,12
                 ; 0000 0024 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0001e5 2fe1      	MOV  R30,R17
0001e6 71ec      	ANDI R30,LOW(0x1C)
                 ; 0000 0025    {
                 ; 0000 0026     if(data=='Y')
                 ; 0000 0027     {
                 ; 0000 0028     }
                 ; 0000 0029    }
                 ; 0000 002A }
0001e7 9109      	LD   R16,Y+
0001e8 9119      	LD   R17,Y+
0001e9 91e9      	LD   R30,Y+
0001ea bfef      	OUT  SREG,R30
0001eb 91e9      	LD   R30,Y+
0001ec 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0031 {
                 ; 0000 0032 char data;
                 ; 0000 0033 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0034 data=rx_buffer[rx_rd_index++];
                 ; 0000 0035 #if RX_BUFFER_SIZE != 256
                 ; 0000 0036 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0037 #endif
                 ; 0000 0038 #asm("cli")
                 ; 0000 0039 --rx_counter;
                 ; 0000 003A #asm("sei")
                 ; 0000 003B return data;
                 ; 0000 003C }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0052 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0001ed 93ea      	ST   -Y,R30
0001ee 93fa      	ST   -Y,R31
0001ef b7ef      	IN   R30,SREG
0001f0 93ea      	ST   -Y,R30
                 ; 0000 0053 if (tx_counter)
0001f1 20cc      	TST  R12
0001f2 f061      	BREQ _0x2B
                 ; 0000 0054    {
                 ; 0000 0055    --tx_counter;
0001f3 94ca      	DEC  R12
                 ; 0000 0056    UDR=tx_buffer[tx_rd_index++];
0001f4 2ded      	MOV  R30,R13
0001f5 94d3      	INC  R13
0001f6 e0f0      	LDI  R31,0
0001f7 53e1      	SUBI R30,LOW(-_tx_buffer)
0001f8 4ffd      	SBCI R31,HIGH(-_tx_buffer)
0001f9 81e0      	LD   R30,Z
0001fa b9ec      	OUT  0xC,R30
                 ; 0000 0057 #if TX_BUFFER_SIZE != 256
                 ; 0000 0058    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0001fb e0e8      	LDI  R30,LOW(8)
0001fc 15ed      	CP   R30,R13
0001fd f409      	BRNE _0x2C
0001fe 24dd      	CLR  R13
                 ; 0000 0059 #endif
                 ; 0000 005A    }
                 _0x2C:
                 ; 0000 005B }
                 _0x2B:
0001ff 91e9      	LD   R30,Y+
000200 bfef      	OUT  SREG,R30
000201 91f9      	LD   R31,Y+
000202 91e9      	LD   R30,Y+
000203 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0062 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0063 while (tx_counter == TX_BUFFER_SIZE);
000204 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x2D:
000205 e0e8      	LDI  R30,LOW(8)
000206 15ec      	CP   R30,R12
000207 f3e9      	BREQ _0x2D
                 ; 0000 0064 #asm("cli")
000208 94f8      	cli
                 ; 0000 0065 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000209 20cc      	TST  R12
00020a f411      	BRNE _0x31
00020b 995d      	SBIC 0xB,5
00020c c00d      	RJMP _0x30
                 _0x31:
                 ; 0000 0066    {
                 ; 0000 0067    tx_buffer[tx_wr_index++]=c;
00020d 2dea      	MOV  R30,R10
00020e 94a3      	INC  R10
00020f e0f0      	LDI  R31,0
000210 53e1      	SUBI R30,LOW(-_tx_buffer)
000211 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000212 81a8      	LD   R26,Y
000213 83a0      	STD  Z+0,R26
                 ; 0000 0068 #if TX_BUFFER_SIZE != 256
                 ; 0000 0069    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000214 e0e8      	LDI  R30,LOW(8)
000215 15ea      	CP   R30,R10
000216 f409      	BRNE _0x33
000217 24aa      	CLR  R10
                 ; 0000 006A #endif
                 ; 0000 006B    ++tx_counter;
                 _0x33:
000218 94c3      	INC  R12
                 ; 0000 006C    }
                 ; 0000 006D else
000219 c002      	RJMP _0x34
                 _0x30:
                 ; 0000 006E    UDR=c;
00021a 81e8      	LD   R30,Y
00021b b9ec      	OUT  0xC,R30
                 ; 0000 006F #asm("sei")
                 _0x34:
00021c 9478      	sei
                 ; 0000 0070 }
00021d 940c 0355 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 0078 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0079 // Declare your local variables here
                 ; 0000 007A      float so;
                 ; 0000 007B 
                 ; 0000 007C // Input/Output Ports initialization
                 ; 0000 007D // Port A initialization
                 ; 0000 007E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00021f 9724      	SBIW R28,4
                 ;	so -> Y+0
000220 e0e0      	LDI  R30,LOW(0)
000221 bbea      	OUT  0x1A,R30
                 ; 0000 0080 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0081 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000222 bbeb      	OUT  0x1B,R30
                 ; 0000 0082 
                 ; 0000 0083 // Port B initialization
                 ; 0000 0084 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0085 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000223 bbe7      	OUT  0x17,R30
                 ; 0000 0086 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0087 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000224 bbe8      	OUT  0x18,R30
                 ; 0000 0088 
                 ; 0000 0089 // Port C initialization
                 ; 0000 008A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 008B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000225 bbe4      	OUT  0x14,R30
                 ; 0000 008C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 008D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000226 bbe5      	OUT  0x15,R30
                 ; 0000 008E 
                 ; 0000 008F // Port D initialization
                 ; 0000 0090 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0091 DDRD=(1<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000227 e8e0      	LDI  R30,LOW(128)
000228 bbe1      	OUT  0x11,R30
                 ; 0000 0092 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0093 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000229 e0e0      	LDI  R30,LOW(0)
00022a bbe2      	OUT  0x12,R30
                 ; 0000 0094 
                 ; 0000 0095 // Timer/Counter 0 initialization
                 ; 0000 0096 // Clock source: System Clock
                 ; 0000 0097 // Clock value: Timer 0 Stopped
                 ; 0000 0098 // Mode: Normal top=0xFF
                 ; 0000 0099 // OC0 output: Disconnected
                 ; 0000 009A TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00022b bfe3      	OUT  0x33,R30
                 ; 0000 009B TCNT0=0x00;
00022c bfe2      	OUT  0x32,R30
                 ; 0000 009C OCR0=0x00;
00022d bfec      	OUT  0x3C,R30
                 ; 0000 009D 
                 ; 0000 009E // Timer/Counter 1 initialization
                 ; 0000 009F // Clock source: System Clock
                 ; 0000 00A0 // Clock value: Timer1 Stopped
                 ; 0000 00A1 // Mode: Normal top=0xFFFF
                 ; 0000 00A2 // OC1A output: Disconnected
                 ; 0000 00A3 // OC1B output: Disconnected
                 ; 0000 00A4 // Noise Canceler: Off
                 ; 0000 00A5 // Input Capture on Falling Edge
                 ; 0000 00A6 // Timer1 Overflow Interrupt: Off
                 ; 0000 00A7 // Input Capture Interrupt: Off
                 ; 0000 00A8 // Compare A Match Interrupt: Off
                 ; 0000 00A9 // Compare B Match Interrupt: Off
                 ; 0000 00AA TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00022e bdef      	OUT  0x2F,R30
                 ; 0000 00AB TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00022f bdee      	OUT  0x2E,R30
                 ; 0000 00AC TCNT1H=0x00;
000230 bded      	OUT  0x2D,R30
                 ; 0000 00AD TCNT1L=0x00;
000231 bdec      	OUT  0x2C,R30
                 ; 0000 00AE ICR1H=0x00;
000232 bde7      	OUT  0x27,R30
                 ; 0000 00AF ICR1L=0x00;
000233 bde6      	OUT  0x26,R30
                 ; 0000 00B0 OCR1AH=0x00;
000234 bdeb      	OUT  0x2B,R30
                 ; 0000 00B1 OCR1AL=0x00;
000235 bdea      	OUT  0x2A,R30
                 ; 0000 00B2 OCR1BH=0x00;
000236 bde9      	OUT  0x29,R30
                 ; 0000 00B3 OCR1BL=0x00;
000237 bde8      	OUT  0x28,R30
                 ; 0000 00B4 
                 ; 0000 00B5 // Timer/Counter 2 initialization
                 ; 0000 00B6 // Clock source: System Clock
                 ; 0000 00B7 // Clock value: Timer2 Stopped
                 ; 0000 00B8 // Mode: Normal top=0xFF
                 ; 0000 00B9 // OC2 output: Disconnected
                 ; 0000 00BA ASSR=0<<AS2;
000238 bde2      	OUT  0x22,R30
                 ; 0000 00BB TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000239 bde5      	OUT  0x25,R30
                 ; 0000 00BC TCNT2=0x00;
00023a bde4      	OUT  0x24,R30
                 ; 0000 00BD OCR2=0x00;
00023b bde3      	OUT  0x23,R30
                 ; 0000 00BE 
                 ; 0000 00BF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00C0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00023c bfe9      	OUT  0x39,R30
                 ; 0000 00C1 
                 ; 0000 00C2 // External Interrupt(s) initialization
                 ; 0000 00C3 // INT0: Off
                 ; 0000 00C4 // INT1: Off
                 ; 0000 00C5 // INT2: Off
                 ; 0000 00C6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00023d bfe5      	OUT  0x35,R30
                 ; 0000 00C7 MCUCSR=(0<<ISC2);
00023e bfe4      	OUT  0x34,R30
                 ; 0000 00C8 
                 ; 0000 00C9 // USART initialization
                 ; 0000 00CA // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00CB // USART Receiver: On
                 ; 0000 00CC // USART Transmitter: On
                 ; 0000 00CD // USART Mode: Asynchronous
                 ; 0000 00CE // USART Baud Rate: 9600
                 ; 0000 00CF UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00023f b9eb      	OUT  0xB,R30
                 ; 0000 00D0 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000240 ede8      	LDI  R30,LOW(216)
000241 b9ea      	OUT  0xA,R30
                 ; 0000 00D1 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
000242 e8e6      	LDI  R30,LOW(134)
000243 bde0      	OUT  0x20,R30
                 ; 0000 00D2 UBRRH=0x00;
000244 e0e0      	LDI  R30,LOW(0)
000245 bde0      	OUT  0x20,R30
                 ; 0000 00D3 UBRRL=0x33;
000246 e3e3      	LDI  R30,LOW(51)
000247 b9e9      	OUT  0x9,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // Analog Comparator initialization
                 ; 0000 00D6 // Analog Comparator: Off
                 ; 0000 00D7 // The Analog Comparator's positive input is
                 ; 0000 00D8 // connected to the AIN0 pin
                 ; 0000 00D9 // The Analog Comparator's negative input is
                 ; 0000 00DA // connected to the AIN1 pin
                 ; 0000 00DB ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000248 e8e0      	LDI  R30,LOW(128)
000249 b9e8      	OUT  0x8,R30
                 ; 0000 00DC 
                 ; 0000 00DD // ADC initialization
                 ; 0000 00DE // ADC Clock frequency: 1000,000 kHz
                 ; 0000 00DF // ADC Voltage Reference: AREF pin
                 ; 0000 00E0 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00E1 ADMUX=ADC_VREF_TYPE;
00024a e4e0      	LDI  R30,LOW(64)
00024b b9e7      	OUT  0x7,R30
                 ; 0000 00E2 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
00024c e8e3      	LDI  R30,LOW(131)
00024d b9e6      	OUT  0x6,R30
                 ; 0000 00E3 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00024e e0e0      	LDI  R30,LOW(0)
00024f bfe0      	OUT  0x30,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // SPI initialization
                 ; 0000 00E6 // SPI disabled
                 ; 0000 00E7 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000250 b9ed      	OUT  0xD,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // TWI initialization
                 ; 0000 00EA // TWI disabled
                 ; 0000 00EB TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000251 bfe6      	OUT  0x36,R30
                 ; 0000 00EC 
                 ; 0000 00ED // Alphanumeric LCD initialization
                 ; 0000 00EE // Connections are specified in the
                 ; 0000 00EF // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F0 // RS - PORTC Bit 4
                 ; 0000 00F1 // RD - PORTC Bit 5
                 ; 0000 00F2 // EN - PORTC Bit 6
                 ; 0000 00F3 // D4 - PORTC Bit 3
                 ; 0000 00F4 // D5 - PORTC Bit 2
                 ; 0000 00F5 // D6 - PORTC Bit 1
                 ; 0000 00F6 // D7 - PORTC Bit 0
                 ; 0000 00F7 // Characters/line: 16
                 ; 0000 00F8 lcd_init(16);
000252 e1a0      	LDI  R26,LOW(16)
000253 940e 0327 	CALL _lcd_init
                 ; 0000 00F9 
                 ; 0000 00FA // Global enable interrupts
                 ; 0000 00FB #asm("sei")
000255 9478      	sei
                 ; 0000 00FC 
                 ; 0000 00FD while (1)
                 _0x35:
                 ; 0000 00FE       {
                 ; 0000 00FF           so = gtri_bcd();
000256 de88      	RCALL _gtri_bcd
000257 940e 0377 	CALL SUBOPT_0x2
                 ; 0000 0100              if (so >= 12.7)
000259 940e 0397 	CALL SUBOPT_0x8
00025b f010      	BRLO _0x38
                 ; 0000 0101              {
                 ; 0000 0102              putchar('A');
00025c e4a1      	LDI  R26,LOW(65)
00025d c044      	RJMP _0x50
                 ; 0000 0103              }
                 ; 0000 0104              else if (so >= 12.5)
                 _0x38:
00025e 940e 03d7 	CALL SUBOPT_0x11
000260 940e 039e 	CALL SUBOPT_0x9
000262 f010      	BRLO _0x3A
                 ; 0000 0105              {
                 ; 0000 0106              putchar('B');
000263 e4a2      	LDI  R26,LOW(66)
000264 c03d      	RJMP _0x50
                 ; 0000 0107              }
                 ; 0000 0108              else if (so >= 12.42)
                 _0x3A:
000265 940e 03d7 	CALL SUBOPT_0x11
000267 940e 03a5 	CALL SUBOPT_0xA
000269 f010      	BRLO _0x3C
                 ; 0000 0109              {
                 ; 0000 010A              putchar('C');
00026a e4a3      	LDI  R26,LOW(67)
00026b c036      	RJMP _0x50
                 ; 0000 010B              }
                 ; 0000 010C             else if(so >= 12.32)
                 _0x3C:
00026c 940e 03d7 	CALL SUBOPT_0x11
00026e 940e 03ac 	CALL SUBOPT_0xB
000270 f010      	BRLO _0x3E
                 ; 0000 010D             {
                 ; 0000 010E             putchar('D');
000271 e4a4      	LDI  R26,LOW(68)
000272 c02f      	RJMP _0x50
                 ; 0000 010F             }
                 ; 0000 0110             else if (so >= 12.20)
                 _0x3E:
000273 940e 03d7 	CALL SUBOPT_0x11
000275 940e 03b3 	CALL SUBOPT_0xC
000277 f010      	BRLO _0x40
                 ; 0000 0111              {
                 ; 0000 0112              putchar('E');
000278 e4a5      	LDI  R26,LOW(69)
000279 c028      	RJMP _0x50
                 ; 0000 0113              }
                 ; 0000 0114              else if (so >= 12.06)
                 _0x40:
00027a 940e 03d7 	CALL SUBOPT_0x11
00027c 940e 03ba 	CALL SUBOPT_0xD
00027e f010      	BRLO _0x42
                 ; 0000 0115              {
                 ; 0000 0116              putchar('F');
00027f e4a6      	LDI  R26,LOW(70)
000280 c021      	RJMP _0x50
                 ; 0000 0117              }
                 ; 0000 0118              else if (so >= 11.9)
                 _0x42:
000281 940e 03d7 	CALL SUBOPT_0x11
000283 940e 0388 	CALL SUBOPT_0x5
000285 f010      	BRLO _0x44
                 ; 0000 0119              {
                 ; 0000 011A              putchar('G');
000286 e4a7      	LDI  R26,LOW(71)
000287 c01a      	RJMP _0x50
                 ; 0000 011B              }
                 ; 0000 011C              else if (so >= 11.75)
                 _0x44:
000288 940e 03d7 	CALL SUBOPT_0x11
00028a 940e 03c9 	CALL SUBOPT_0xF
00028c f010      	BRLO _0x46
                 ; 0000 011D              {
                 ; 0000 011E              putchar('H');
00028d e4a8      	LDI  R26,LOW(72)
00028e c013      	RJMP _0x50
                 ; 0000 011F              }
                 ; 0000 0120             else if (so >= 11.58)
                 _0x46:
00028f 940e 03d7 	CALL SUBOPT_0x11
                +
000291 eaee     +LDI R30 , LOW ( 0x413947AE )
000292 e4f7     +LDI R31 , HIGH ( 0x413947AE )
000293 e369     +LDI R22 , BYTE3 ( 0x413947AE )
000294 e471     +LDI R23 , BYTE4 ( 0x413947AE )
                 	__GETD1N 0x413947AE
000295 940e 0519 	CALL __CMPF12
000297 f010      	BRLO _0x48
                 ; 0000 0121              {
                 ; 0000 0122              putchar('I');
000298 e4a9      	LDI  R26,LOW(73)
000299 c008      	RJMP _0x50
                 ; 0000 0123              }
                 ; 0000 0124              else if (so >= 11.31)
                 _0x48:
00029a 940e 03d7 	CALL SUBOPT_0x11
00029c 940e 03d0 	CALL SUBOPT_0x10
00029e f010      	BRLO _0x4A
                 ; 0000 0125              {
                 ; 0000 0126              putchar('K');
00029f e4ab      	LDI  R26,LOW(75)
0002a0 c001      	RJMP _0x50
                 ; 0000 0127              }
                 ; 0000 0128             else
                 _0x4A:
                 ; 0000 0129             {
                 ; 0000 012A             putchar('L');
0002a1 e4ac      	LDI  R26,LOW(76)
                 _0x50:
0002a2 df61      	RCALL _putchar
                 ; 0000 012B             }
                 ; 0000 012C 
                 ; 0000 012D             lcd_hienthi();
0002a3 df2a      	RCALL _lcd_hienthi
                 ; 0000 012E       }
0002a4 cfb1      	RJMP _0x35
                 ; 0000 012F }
                 _0x4C:
0002a5 cfff      	RJMP _0x4C
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002a6 93aa      	ST   -Y,R26
0002a7 81e8      	LD   R30,Y
0002a8 71e0      	ANDI R30,LOW(0x10)
0002a9 f011      	BREQ _0x2020004
0002aa 9aab      	SBI  0x15,3
0002ab c001      	RJMP _0x2020005
                 _0x2020004:
0002ac 98ab      	CBI  0x15,3
                 _0x2020005:
0002ad 81e8      	LD   R30,Y
0002ae 72e0      	ANDI R30,LOW(0x20)
0002af f011      	BREQ _0x2020006
0002b0 9aaa      	SBI  0x15,2
0002b1 c001      	RJMP _0x2020007
                 _0x2020006:
0002b2 98aa      	CBI  0x15,2
                 _0x2020007:
0002b3 81e8      	LD   R30,Y
0002b4 74e0      	ANDI R30,LOW(0x40)
0002b5 f011      	BREQ _0x2020008
0002b6 9aa9      	SBI  0x15,1
0002b7 c001      	RJMP _0x2020009
                 _0x2020008:
0002b8 98a9      	CBI  0x15,1
                 _0x2020009:
0002b9 81e8      	LD   R30,Y
0002ba 78e0      	ANDI R30,LOW(0x80)
0002bb f011      	BREQ _0x202000A
0002bc 9aa8      	SBI  0x15,0
0002bd c001      	RJMP _0x202000B
                 _0x202000A:
0002be 98a8      	CBI  0x15,0
                 _0x202000B:
                +
0002bf e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c0 958a     +DEC R24
0002c1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c2 9aae      	SBI  0x15,6
                +
0002c3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c4 958a     +DEC R24
0002c5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c6 98ae      	CBI  0x15,6
                +
0002c7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c8 958a     +DEC R24
0002c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ca c08a      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002cb 93aa      	ST   -Y,R26
0002cc 81a8      	LD   R26,Y
0002cd dfd8      	RCALL __lcd_write_nibble_G101
0002ce 81e8          ld    r30,y
0002cf 95e2          swap  r30
0002d0 83e8          st    y,r30
0002d1 81a8      	LD   R26,Y
0002d2 dfd3      	RCALL __lcd_write_nibble_G101
                +
0002d3 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002d4 958a     +DEC R24
0002d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002d6 c07e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002d7 93aa      	ST   -Y,R26
0002d8 81e8      	LD   R30,Y
0002d9 e0f0      	LDI  R31,0
0002da 52e9      	SUBI R30,LOW(-__base_y_G101)
0002db 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002dc 81e0      	LD   R30,Z
0002dd 81a9      	LDD  R26,Y+1
0002de 0fae      	ADD  R26,R30
0002df dfeb      	RCALL __lcd_write_data
0002e0 81e9      	LDD  R30,Y+1
0002e1 93e0 02db 	STS  __lcd_x,R30
0002e3 81e8      	LD   R30,Y
0002e4 93e0 02dc 	STS  __lcd_y,R30
0002e6 9622      	ADIW R28,2
0002e7 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002e8 e0a2      	LDI  R26,LOW(2)
0002e9 940e 03da 	CALL SUBOPT_0x12
0002eb e0ac      	LDI  R26,LOW(12)
0002ec dfde      	RCALL __lcd_write_data
0002ed e0a1      	LDI  R26,LOW(1)
0002ee 940e 03da 	CALL SUBOPT_0x12
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 93e0 02dc 	STS  __lcd_y,R30
0002f3 93e0 02db 	STS  __lcd_x,R30
0002f5 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002f6 93aa      	ST   -Y,R26
0002f7 81a8      	LD   R26,Y
0002f8 30aa      	CPI  R26,LOW(0xA)
0002f9 f031      	BREQ _0x2020011
0002fa 91e0 02dd 	LDS  R30,__lcd_maxx
0002fc 91a0 02db 	LDS  R26,__lcd_x
0002fe 17ae      	CP   R26,R30
0002ff f060      	BRLO _0x2020010
                 _0x2020011:
000300 e0e0      	LDI  R30,LOW(0)
000301 93ea      	ST   -Y,R30
000302 91a0 02dc 	LDS  R26,__lcd_y
000304 5faf      	SUBI R26,-LOW(1)
000305 93a0 02dc 	STS  __lcd_y,R26
000307 dfcf      	RCALL _lcd_gotoxy
000308 81a8      	LD   R26,Y
000309 30aa      	CPI  R26,LOW(0xA)
00030a f409      	BRNE _0x2020013
00030b c049      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00030c 91e0 02db 	LDS  R30,__lcd_x
00030e 5fef      	SUBI R30,-LOW(1)
00030f 93e0 02db 	STS  __lcd_x,R30
000311 9aac      	SBI  0x15,4
000312 81a8      	LD   R26,Y
000313 dfb7      	RCALL __lcd_write_data
000314 98ac      	CBI  0x15,4
000315 c03f      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000316 93ba      	ST   -Y,R27
000317 93aa      	ST   -Y,R26
000318 931a      	ST   -Y,R17
                 _0x2020014:
000319 81a9      	LDD  R26,Y+1
00031a 81ba      	LDD  R27,Y+1+1
00031b 91ed      	LD   R30,X+
00031c 83a9      	STD  Y+1,R26
00031d 83ba      	STD  Y+1+1,R27
00031e 2f1e      	MOV  R17,R30
00031f 30e0      	CPI  R30,0
000320 f019      	BREQ _0x2020016
000321 2fa1      	MOV  R26,R17
000322 dfd3      	RCALL _lcd_putchar
000323 cff5      	RJMP _0x2020014
                 _0x2020016:
000324 8118      	LDD  R17,Y+0
000325 9623      	ADIW R28,3
000326 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000327 93aa      	ST   -Y,R26
000328 9aa3      	SBI  0x14,3
000329 9aa2      	SBI  0x14,2
00032a 9aa1      	SBI  0x14,1
00032b 9aa0      	SBI  0x14,0
00032c 9aa6      	SBI  0x14,6
00032d 9aa4      	SBI  0x14,4
00032e 9aa5      	SBI  0x14,5
00032f 98ae      	CBI  0x15,6
000330 98ac      	CBI  0x15,4
000331 98ad      	CBI  0x15,5
000332 81e8      	LD   R30,Y
000333 93e0 02dd 	STS  __lcd_maxx,R30
000335 58e0      	SUBI R30,-LOW(128)
                +
000336 93e0 02d9+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000338 81e8      	LD   R30,Y
000339 54e0      	SUBI R30,-LOW(192)
                +
00033a 93e0 02da+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00033c e1a4      	LDI  R26,LOW(20)
00033d e0b0      	LDI  R27,0
00033e 940e 03e8 	CALL _delay_ms
000340 940e 03e0 	CALL SUBOPT_0x13
000342 940e 03e0 	CALL SUBOPT_0x13
000344 940e 03e0 	CALL SUBOPT_0x13
000346 e2a0      	LDI  R26,LOW(32)
000347 df5e      	RCALL __lcd_write_nibble_G101
                +
000348 ec88     +LDI R24 , LOW ( 200 )
000349 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00034a 9701     +SBIW R24 , 1
00034b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00034c e2a8      	LDI  R26,LOW(40)
00034d df7d      	RCALL __lcd_write_data
00034e e0a4      	LDI  R26,LOW(4)
00034f df7b      	RCALL __lcd_write_data
000350 e8a5      	LDI  R26,LOW(133)
000351 df79      	RCALL __lcd_write_data
000352 e0a6      	LDI  R26,LOW(6)
000353 df77      	RCALL __lcd_write_data
000354 df93      	RCALL _lcd_clear
                 _0x2080001:
000355 9621      	ADIW R28,1
000356 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer:
0002c7           	.BYTE 0x8
                 _tx_buffer:
0002cf           	.BYTE 0x8
                 __base_y_G101:
0002d7           	.BYTE 0x4
                 __lcd_x:
0002db           	.BYTE 0x1
                 __lcd_y:
0002dc           	.BYTE 0x1
                 __lcd_maxx:
0002dd           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
000357 2766      	CLR  R22
000358 2777      	CLR  R23
000359 940e 0458 	CALL __CDF1
                +
00035b e0a0     +LDI R26 , LOW ( 0x40A00000 )
00035c e0b0     +LDI R27 , HIGH ( 0x40A00000 )
00035d ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
00035e e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
00035f 940e 0486 	CALL __MULF12
000361 01df      	MOVW R26,R30
000362 01cb      	MOVW R24,R22
                +
000363 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000364 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000365 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000366 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000367 940e 04d4 	CALL __DIVF21
000369 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
                +
00036a e6e6     +LDI R30 , LOW ( 0x40B66666 )
00036b e6f6     +LDI R31 , HIGH ( 0x40B66666 )
00036c eb66     +LDI R22 , BYTE3 ( 0x40B66666 )
00036d e470     +LDI R23 , BYTE4 ( 0x40B66666 )
                 	__GETD1N 0x40B66666
00036e 940e 0486 	CALL __MULF12
                +
000370 e0a0     +LDI R26 , LOW ( 0x42C80000 )
000371 e0b0     +LDI R27 , HIGH ( 0x42C80000 )
000372 ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
000373 e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
000374 940e 0486 	CALL __MULF12
000376 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000377 940e 0561 	CALL __PUTD1S0
000379 940e 055c 	CALL __GETD2S0
00037b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
00037c e0e0     +LDI R30 , LOW ( 0x42C80000 )
00037d e0f0     +LDI R31 , HIGH ( 0x42C80000 )
00037e ec68     +LDI R22 , BYTE3 ( 0x42C80000 )
00037f e472     +LDI R23 , BYTE4 ( 0x42C80000 )
                 	__GETD1N 0x42C80000
000380 940e 04d4 	CALL __DIVF21
000382 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x4:
                +
000383 85aa     +LDD R26 , Y + 10
000384 85bb     +LDD R27 , Y + 10 + 1
000385 858c     +LDD R24 , Y + 10 + 2
000386 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000387 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
                +
000388 e6e6     +LDI R30 , LOW ( 0x413E6666 )
000389 e6f6     +LDI R31 , HIGH ( 0x413E6666 )
00038a e36e     +LDI R22 , BYTE3 ( 0x413E6666 )
00038b e471     +LDI R23 , BYTE4 ( 0x413E6666 )
                 	__GETD1N 0x413E6666
00038c 940e 0519 	CALL __CMPF12
00038e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00038f e0e1      	LDI  R30,LOW(1)
000390 93ea      	ST   -Y,R30
000391 e0a1      	LDI  R26,LOW(1)
000392 940c 02d7 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000394 940e 0316 	CALL _lcd_puts
000396 cfec      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
000397 e3e3     +LDI R30 , LOW ( 0x414B3333 )
000398 e3f3     +LDI R31 , HIGH ( 0x414B3333 )
000399 e46b     +LDI R22 , BYTE3 ( 0x414B3333 )
00039a e471     +LDI R23 , BYTE4 ( 0x414B3333 )
                 	__GETD1N 0x414B3333
00039b 940e 0519 	CALL __CMPF12
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
                +
00039e e0e0     +LDI R30 , LOW ( 0x41480000 )
00039f e0f0     +LDI R31 , HIGH ( 0x41480000 )
0003a0 e468     +LDI R22 , BYTE3 ( 0x41480000 )
0003a1 e471     +LDI R23 , BYTE4 ( 0x41480000 )
                 	__GETD1N 0x41480000
0003a2 940e 0519 	CALL __CMPF12
0003a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0003a5 e5e2     +LDI R30 , LOW ( 0x4146B852 )
0003a6 ebf8     +LDI R31 , HIGH ( 0x4146B852 )
0003a7 e466     +LDI R22 , BYTE3 ( 0x4146B852 )
0003a8 e471     +LDI R23 , BYTE4 ( 0x4146B852 )
                 	__GETD1N 0x4146B852
0003a9 940e 0519 	CALL __CMPF12
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
                +
0003ac ebe8     +LDI R30 , LOW ( 0x41451EB8 )
0003ad e1fe     +LDI R31 , HIGH ( 0x41451EB8 )
0003ae e465     +LDI R22 , BYTE3 ( 0x41451EB8 )
0003af e471     +LDI R23 , BYTE4 ( 0x41451EB8 )
                 	__GETD1N 0x41451EB8
0003b0 940e 0519 	CALL __CMPF12
0003b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
0003b3 e3e3     +LDI R30 , LOW ( 0x41433333 )
0003b4 e3f3     +LDI R31 , HIGH ( 0x41433333 )
0003b5 e463     +LDI R22 , BYTE3 ( 0x41433333 )
0003b6 e471     +LDI R23 , BYTE4 ( 0x41433333 )
                 	__GETD1N 0x41433333
0003b7 940e 0519 	CALL __CMPF12
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
0003ba ece3     +LDI R30 , LOW ( 0x4140F5C3 )
0003bb eff5     +LDI R31 , HIGH ( 0x4140F5C3 )
0003bc e460     +LDI R22 , BYTE3 ( 0x4140F5C3 )
0003bd e471     +LDI R23 , BYTE4 ( 0x4140F5C3 )
                 	__GETD1N 0x4140F5C3
0003be 940e 0519 	CALL __CMPF12
0003c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
0003c1 dfc1      	RCALL SUBOPT_0x4
                +
0003c2 eaee     +LDI R30 , LOW ( 0x413947AE )
0003c3 e4f7     +LDI R31 , HIGH ( 0x413947AE )
0003c4 e369     +LDI R22 , BYTE3 ( 0x413947AE )
0003c5 e471     +LDI R23 , BYTE4 ( 0x413947AE )
                 	__GETD1N 0x413947AE
0003c6 940e 0519 	CALL __CMPF12
0003c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
0003c9 e0e0     +LDI R30 , LOW ( 0x413C0000 )
0003ca e0f0     +LDI R31 , HIGH ( 0x413C0000 )
0003cb e36c     +LDI R22 , BYTE3 ( 0x413C0000 )
0003cc e471     +LDI R23 , BYTE4 ( 0x413C0000 )
                 	__GETD1N 0x413C0000
0003cd 940e 0519 	CALL __CMPF12
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
                +
0003d0 ece3     +LDI R30 , LOW ( 0x4134F5C3 )
0003d1 eff5     +LDI R31 , HIGH ( 0x4134F5C3 )
0003d2 e364     +LDI R22 , BYTE3 ( 0x4134F5C3 )
0003d3 e471     +LDI R23 , BYTE4 ( 0x4134F5C3 )
                 	__GETD1N 0x4134F5C3
0003d4 940e 0519 	CALL __CMPF12
0003d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x11:
0003d7 940e 055c 	CALL __GETD2S0
0003d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0003da 940e 02cb 	CALL __lcd_write_data
0003dc e0a3      	LDI  R26,LOW(3)
0003dd e0b0      	LDI  R27,0
0003de 940c 03e8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
0003e0 e3a0      	LDI  R26,LOW(48)
0003e1 940e 02a6 	CALL __lcd_write_nibble_G101
                +
0003e3 ec88     +LDI R24 , LOW ( 200 )
0003e4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003e5 9701     +SBIW R24 , 1
0003e6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003e7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003e8 9610      	adiw r26,0
0003e9 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003ea ed80     +LDI R24 , LOW ( 0x7D0 )
0003eb e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003ec 9701     +SBIW R24 , 1
0003ed f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003ee 95a8      	wdr
0003ef 9711      	sbiw r26,1
0003f0 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003f1 9508      	ret
                 
                 __ROUND_REPACK:
0003f2 2355      	TST  R21
0003f3 f442      	BRPL __REPACK
0003f4 3850      	CPI  R21,0x80
0003f5 f411      	BRNE __ROUND_REPACK0
0003f6 ffe0      	SBRS R30,0
0003f7 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0003f8 9631      	ADIW R30,1
0003f9 1f69      	ADC  R22,R25
0003fa 1f79      	ADC  R23,R25
0003fb f06b      	BRVS __REPACK1
                 
                 __REPACK:
0003fc e850      	LDI  R21,0x80
0003fd 2757      	EOR  R21,R23
0003fe f411      	BRNE __REPACK0
0003ff 935f      	PUSH R21
000400 c073      	RJMP __ZERORES
                 __REPACK0:
000401 3f5f      	CPI  R21,0xFF
000402 f031      	BREQ __REPACK1
000403 0f66      	LSL  R22
000404 0c00      	LSL  R0
000405 9557      	ROR  R21
000406 9567      	ROR  R22
000407 2f75      	MOV  R23,R21
000408 9508      	RET
                 __REPACK1:
000409 935f      	PUSH R21
00040a 2000      	TST  R0
00040b f00a      	BRMI __REPACK2
00040c c073      	RJMP __MAXRES
                 __REPACK2:
00040d c06c      	RJMP __MINRES
                 
                 __UNPACK:
00040e e850      	LDI  R21,0x80
00040f 2e19      	MOV  R1,R25
000410 2215      	AND  R1,R21
000411 0f88      	LSL  R24
000412 1f99      	ROL  R25
000413 2795      	EOR  R25,R21
000414 0f55      	LSL  R21
000415 9587      	ROR  R24
                 
                 __UNPACK1:
000416 e850      	LDI  R21,0x80
000417 2e07      	MOV  R0,R23
000418 2205      	AND  R0,R21
000419 0f66      	LSL  R22
00041a 1f77      	ROL  R23
00041b 2775      	EOR  R23,R21
00041c 0f55      	LSL  R21
00041d 9567      	ROR  R22
00041e 9508      	RET
                 
                 __CFD1U:
00041f 9468      	SET
000420 c001      	RJMP __CFD1U0
                 __CFD1:
000421 94e8      	CLT
                 __CFD1U0:
000422 935f      	PUSH R21
000423 dff2      	RCALL __UNPACK1
000424 3870      	CPI  R23,0x80
000425 f018      	BRLO __CFD10
000426 3f7f      	CPI  R23,0xFF
000427 f408      	BRCC __CFD10
000428 c04b      	RJMP __ZERORES
                 __CFD10:
000429 e156      	LDI  R21,22
00042a 1b57      	SUB  R21,R23
00042b f4aa      	BRPL __CFD11
00042c 9551      	NEG  R21
00042d 3058      	CPI  R21,8
00042e f40e      	BRTC __CFD19
00042f 3059      	CPI  R21,9
                 __CFD19:
000430 f030      	BRLO __CFD17
000431 efef      	SER  R30
000432 efff      	SER  R31
000433 ef6f      	SER  R22
000434 e77f      	LDI  R23,0x7F
000435 f977      	BLD  R23,7
000436 c01a      	RJMP __CFD15
                 __CFD17:
000437 2777      	CLR  R23
000438 2355      	TST  R21
000439 f0b9      	BREQ __CFD15
                 __CFD18:
00043a 0fee      	LSL  R30
00043b 1fff      	ROL  R31
00043c 1f66      	ROL  R22
00043d 1f77      	ROL  R23
00043e 955a      	DEC  R21
00043f f7d1      	BRNE __CFD18
000440 c010      	RJMP __CFD15
                 __CFD11:
000441 2777      	CLR  R23
                 __CFD12:
000442 3058      	CPI  R21,8
000443 f028      	BRLO __CFD13
000444 2fef      	MOV  R30,R31
000445 2ff6      	MOV  R31,R22
000446 2f67      	MOV  R22,R23
000447 5058      	SUBI R21,8
000448 cff9      	RJMP __CFD12
                 __CFD13:
000449 2355      	TST  R21
00044a f031      	BREQ __CFD15
                 __CFD14:
00044b 9576      	LSR  R23
00044c 9567      	ROR  R22
00044d 95f7      	ROR  R31
00044e 95e7      	ROR  R30
00044f 955a      	DEC  R21
000450 f7d1      	BRNE __CFD14
                 __CFD15:
000451 2000      	TST  R0
000452 f40a      	BRPL __CFD16
000453 d0e5      	RCALL __ANEGD1
                 __CFD16:
000454 915f      	POP  R21
000455 9508      	RET
                 
                 __CDF1U:
000456 9468      	SET
000457 c001      	RJMP __CDF1U0
                 __CDF1:
000458 94e8      	CLT
                 __CDF1U0:
000459 9730      	SBIW R30,0
00045a 4060      	SBCI R22,0
00045b 4070      	SBCI R23,0
00045c f0b1      	BREQ __CDF10
00045d 2400      	CLR  R0
00045e f026      	BRTS __CDF11
00045f 2377      	TST  R23
000460 f412      	BRPL __CDF11
000461 9400      	COM  R0
000462 d0d6      	RCALL __ANEGD1
                 __CDF11:
000463 2e17      	MOV  R1,R23
000464 e17e      	LDI  R23,30
000465 2011      	TST  R1
                 __CDF12:
000466 f032      	BRMI __CDF13
000467 957a      	DEC  R23
000468 0fee      	LSL  R30
000469 1fff      	ROL  R31
00046a 1f66      	ROL  R22
00046b 1c11      	ROL  R1
00046c cff9      	RJMP __CDF12
                 __CDF13:
00046d 2fef      	MOV  R30,R31
00046e 2ff6      	MOV  R31,R22
00046f 2d61      	MOV  R22,R1
000470 935f      	PUSH R21
000471 df8a      	RCALL __REPACK
000472 915f      	POP  R21
                 __CDF10:
000473 9508      	RET
                 
                 __ZERORES:
000474 27ee      	CLR  R30
000475 27ff      	CLR  R31
000476 2766      	CLR  R22
000477 2777      	CLR  R23
000478 915f      	POP  R21
000479 9508      	RET
                 
                 __MINRES:
00047a efef      	SER  R30
00047b efff      	SER  R31
00047c e76f      	LDI  R22,0x7F
00047d ef7f      	SER  R23
00047e 915f      	POP  R21
00047f 9508      	RET
                 
                 __MAXRES:
000480 efef      	SER  R30
000481 efff      	SER  R31
000482 e76f      	LDI  R22,0x7F
000483 e77f      	LDI  R23,0x7F
000484 915f      	POP  R21
000485 9508      	RET
                 
                 __MULF12:
000486 935f      	PUSH R21
000487 df86      	RCALL __UNPACK
000488 3870      	CPI  R23,0x80
000489 f351      	BREQ __ZERORES
00048a 3890      	CPI  R25,0x80
00048b f341      	BREQ __ZERORES
00048c 2401      	EOR  R0,R1
00048d 9408      	SEC
00048e 1f79      	ADC  R23,R25
00048f f423      	BRVC __MULF124
000490 f31c      	BRLT __ZERORES
                 __MULF125:
000491 2000      	TST  R0
000492 f33a      	BRMI __MINRES
000493 cfec      	RJMP __MAXRES
                 __MULF124:
000494 920f      	PUSH R0
000495 931f      	PUSH R17
000496 932f      	PUSH R18
000497 933f      	PUSH R19
000498 934f      	PUSH R20
000499 2711      	CLR  R17
00049a 2722      	CLR  R18
00049b 2799      	CLR  R25
00049c 9f68      	MUL  R22,R24
00049d 01a0      	MOVW R20,R0
00049e 9f8f      	MUL  R24,R31
00049f 2d30      	MOV  R19,R0
0004a0 0d41      	ADD  R20,R1
0004a1 1f59      	ADC  R21,R25
0004a2 9f6b      	MUL  R22,R27
0004a3 0d30      	ADD  R19,R0
0004a4 1d41      	ADC  R20,R1
0004a5 1f59      	ADC  R21,R25
0004a6 9f8e      	MUL  R24,R30
0004a7 d027      	RCALL __MULF126
0004a8 9fbf      	MUL  R27,R31
0004a9 d025      	RCALL __MULF126
0004aa 9f6a      	MUL  R22,R26
0004ab d023      	RCALL __MULF126
0004ac 9fbe      	MUL  R27,R30
0004ad d01d      	RCALL __MULF127
0004ae 9faf      	MUL  R26,R31
0004af d01b      	RCALL __MULF127
0004b0 9fae      	MUL  R26,R30
0004b1 0d11      	ADD  R17,R1
0004b2 1f29      	ADC  R18,R25
0004b3 1f39      	ADC  R19,R25
0004b4 1f49      	ADC  R20,R25
0004b5 1f59      	ADC  R21,R25
0004b6 2fe3      	MOV  R30,R19
0004b7 2ff4      	MOV  R31,R20
0004b8 2f65      	MOV  R22,R21
0004b9 2f52      	MOV  R21,R18
0004ba 914f      	POP  R20
0004bb 913f      	POP  R19
0004bc 912f      	POP  R18
0004bd 911f      	POP  R17
0004be 900f      	POP  R0
0004bf 2366      	TST  R22
0004c0 f02a      	BRMI __MULF122
0004c1 0f55      	LSL  R21
0004c2 1fee      	ROL  R30
0004c3 1fff      	ROL  R31
0004c4 1f66      	ROL  R22
0004c5 c002      	RJMP __MULF123
                 __MULF122:
0004c6 9573      	INC  R23
0004c7 f24b      	BRVS __MULF125
                 __MULF123:
0004c8 df29      	RCALL __ROUND_REPACK
0004c9 915f      	POP  R21
0004ca 9508      	RET
                 
                 __MULF127:
0004cb 0d10      	ADD  R17,R0
0004cc 1d21      	ADC  R18,R1
0004cd 1f39      	ADC  R19,R25
0004ce c002      	RJMP __MULF128
                 __MULF126:
0004cf 0d20      	ADD  R18,R0
0004d0 1d31      	ADC  R19,R1
                 __MULF128:
0004d1 1f49      	ADC  R20,R25
0004d2 1f59      	ADC  R21,R25
0004d3 9508      	RET
                 
                 __DIVF21:
0004d4 935f      	PUSH R21
0004d5 df38      	RCALL __UNPACK
0004d6 3870      	CPI  R23,0x80
0004d7 f421      	BRNE __DIVF210
0004d8 2011      	TST  R1
                 __DIVF211:
0004d9 f40a      	BRPL __DIVF219
0004da cf9f      	RJMP __MINRES
                 __DIVF219:
0004db cfa4      	RJMP __MAXRES
                 __DIVF210:
0004dc 3890      	CPI  R25,0x80
0004dd f409      	BRNE __DIVF218
                 __DIVF217:
0004de cf95      	RJMP __ZERORES
                 __DIVF218:
0004df 2401      	EOR  R0,R1
0004e0 9408      	SEC
0004e1 0b97      	SBC  R25,R23
0004e2 f41b      	BRVC __DIVF216
0004e3 f3d4      	BRLT __DIVF217
0004e4 2000      	TST  R0
0004e5 cff3      	RJMP __DIVF211
                 __DIVF216:
0004e6 2f79      	MOV  R23,R25
0004e7 931f      	PUSH R17
0004e8 932f      	PUSH R18
0004e9 933f      	PUSH R19
0004ea 934f      	PUSH R20
0004eb 2411      	CLR  R1
0004ec 2711      	CLR  R17
0004ed 2722      	CLR  R18
0004ee 2733      	CLR  R19
0004ef 2744      	CLR  R20
0004f0 2755      	CLR  R21
0004f1 e290      	LDI  R25,32
                 __DIVF212:
0004f2 17ae      	CP   R26,R30
0004f3 07bf      	CPC  R27,R31
0004f4 0786      	CPC  R24,R22
0004f5 0741      	CPC  R20,R17
0004f6 f030      	BRLO __DIVF213
0004f7 1bae      	SUB  R26,R30
0004f8 0bbf      	SBC  R27,R31
0004f9 0b86      	SBC  R24,R22
0004fa 0b41      	SBC  R20,R17
0004fb 9408      	SEC
0004fc c001      	RJMP __DIVF214
                 __DIVF213:
0004fd 9488      	CLC
                 __DIVF214:
0004fe 1f55      	ROL  R21
0004ff 1f22      	ROL  R18
000500 1f33      	ROL  R19
000501 1c11      	ROL  R1
000502 1faa      	ROL  R26
000503 1fbb      	ROL  R27
000504 1f88      	ROL  R24
000505 1f44      	ROL  R20
000506 959a      	DEC  R25
000507 f751      	BRNE __DIVF212
000508 01f9      	MOVW R30,R18
000509 2d61      	MOV  R22,R1
00050a 914f      	POP  R20
00050b 913f      	POP  R19
00050c 912f      	POP  R18
00050d 911f      	POP  R17
00050e 2366      	TST  R22
00050f f032      	BRMI __DIVF215
000510 0f55      	LSL  R21
000511 1fee      	ROL  R30
000512 1fff      	ROL  R31
000513 1f66      	ROL  R22
000514 957a      	DEC  R23
000515 f243      	BRVS __DIVF217
                 __DIVF215:
000516 dedb      	RCALL __ROUND_REPACK
000517 915f      	POP  R21
000518 9508      	RET
                 
                 __CMPF12:
000519 2399      	TST  R25
00051a f09a      	BRMI __CMPF120
00051b 2377      	TST  R23
00051c f042      	BRMI __CMPF121
00051d 1797      	CP   R25,R23
00051e f048      	BRLO __CMPF122
00051f f429      	BRNE __CMPF121
000520 17ae      	CP   R26,R30
000521 07bf      	CPC  R27,R31
000522 0786      	CPC  R24,R22
000523 f020      	BRLO __CMPF122
000524 f031      	BREQ __CMPF123
                 __CMPF121:
000525 9498      	CLZ
000526 9488      	CLC
000527 9508      	RET
                 __CMPF122:
000528 9498      	CLZ
000529 9408      	SEC
00052a 9508      	RET
                 __CMPF123:
00052b 9418      	SEZ
00052c 9488      	CLC
00052d 9508      	RET
                 __CMPF120:
00052e 2377      	TST  R23
00052f f7c2      	BRPL __CMPF122
000530 1797      	CP   R25,R23
000531 f398      	BRLO __CMPF121
000532 f7a9      	BRNE __CMPF122
000533 17ea      	CP   R30,R26
000534 07fb      	CPC  R31,R27
000535 0768      	CPC  R22,R24
000536 f388      	BRLO __CMPF122
000537 f399      	BREQ __CMPF123
000538 cfec      	RJMP __CMPF121
                 
                 __ANEGD1:
000539 95f0      	COM  R31
00053a 9560      	COM  R22
00053b 9570      	COM  R23
00053c 95e1      	NEG  R30
00053d 4fff      	SBCI R31,-1
00053e 4f6f      	SBCI R22,-1
00053f 4f7f      	SBCI R23,-1
000540 9508      	RET
                 
                 __CWD1:
000541 2f6f      	MOV  R22,R31
000542 0f66      	ADD  R22,R22
000543 0b66      	SBC  R22,R22
000544 2f76      	MOV  R23,R22
000545 9508      	RET
                 
                 __DIVW21U:
000546 2400      	CLR  R0
000547 2411      	CLR  R1
000548 e190      	LDI  R25,16
                 __DIVW21U1:
000549 0faa      	LSL  R26
00054a 1fbb      	ROL  R27
00054b 1c00      	ROL  R0
00054c 1c11      	ROL  R1
00054d 1a0e      	SUB  R0,R30
00054e 0a1f      	SBC  R1,R31
00054f f418      	BRCC __DIVW21U2
000550 0e0e      	ADD  R0,R30
000551 1e1f      	ADC  R1,R31
000552 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000553 60a1      	SBR  R26,1
                 __DIVW21U3:
000554 959a      	DEC  R25
000555 f799      	BRNE __DIVW21U1
000556 01fd      	MOVW R30,R26
000557 01d0      	MOVW R26,R0
000558 9508      	RET
                 
                 __MODW21U:
000559 dfec      	RCALL __DIVW21U
00055a 01fd      	MOVW R30,R26
00055b 9508      	RET
                 
                 __GETD2S0:
00055c 81a8      	LD   R26,Y
00055d 81b9      	LDD  R27,Y+1
00055e 818a      	LDD  R24,Y+2
00055f 819b      	LDD  R25,Y+3
000560 9508      	RET
                 
                 __PUTD1S0:
000561 83e8      	ST   Y,R30
000562 83f9      	STD  Y+1,R31
000563 836a      	STD  Y+2,R22
000564 837b      	STD  Y+3,R23
000565 9508      	RET
                 
                 __SAVELOCR6:
000566 935a      	ST   -Y,R21
                 __SAVELOCR5:
000567 934a      	ST   -Y,R20
                 __SAVELOCR4:
000568 933a      	ST   -Y,R19
                 __SAVELOCR3:
000569 932a      	ST   -Y,R18
                 __SAVELOCR2:
00056a 931a      	ST   -Y,R17
00056b 930a      	ST   -Y,R16
00056c 9508      	RET
                 
                 __LOADLOCR6:
00056d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00056e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00056f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000570 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000571 8119      	LDD  R17,Y+1
000572 8108      	LD   R16,Y
000573 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32L register use summary:
r0 :  27 r1 :  22 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   1 r7 :   0 
r8 :   0 r9 :   0 r10:   4 r11:   0 r12:   5 r13:   4 r14:   0 r15:   0 
r16:   7 r17:  20 r18:  16 r19:  14 r20:  18 r21:  51 r22:  62 r23:  59 
r24:  41 r25:  39 r26: 114 r27:  45 r28:   9 r29:   1 r30: 202 r31:  67 
x  :   4 y  : 124 z  :  10 
Registers used: 26 out of 35 (74.3%)

ATmega32L instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  16 add   :   8 
adiw  :   7 and   :   2 andi  :   5 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  19 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  28 
brlt  :   2 brmi  :   7 brne  :  26 brpl  :   6 brsh  :   1 brtc  :   1 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 call  : 101 
cbi   :  11 cbr   :   0 clc   :   3 clh   :   0 cli   :   2 cln   :   0 
clr   :  24 cls   :   0 clt   :   2 clv   :   0 clz   :   2 com   :   4 
cp    :   9 cpc   :   7 cpi   :  14 cpse  :   0 dec   :  13 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   4 jmp   :  26 ld    :  29 ldd   :  40 ldi   : 194 
lds   :   4 lpm   :   7 lsl   :  11 lsr   :   1 mov   :  27 movw  :  18 
mul   :   9 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  50 pop   :  16 push  :  15 rcall :  34 ret   :  46 
reti  :   2 rjmp  :  58 rol   :  25 ror   :   7 sbc   :   6 sbci  :   8 
sbi   :  17 sbic  :   1 sbis  :   1 sbiw  :  11 sbr   :   1 sbrc  :   0 
sbrs  :   1 sec   :   4 seh   :   0 sei   :   2 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  32 std   :  30 sts   :   9 sub   :   3 subi  :  12 swap  :   1 
tst   :  17 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega32L memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ae8   2550    242   2792   32768   8.5%
[.dseg] 0x000060 0x0002de      0    126    126    2048   6.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
